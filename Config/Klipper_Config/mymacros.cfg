[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos  : True ; use custom park coordinates for x,y [True/False] 
variable_custom_park_x   : 10.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y   : 220.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz  : 100.0   ; custom dz value; the value in mm to lift the nozzle when move to park position 
variable_retract         : 1.0   ; the value to retract while PAUSE
variable_cancel_retract  : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract   : 35.0  ; retract speed in mm/s
variable_unretract       : 1.0   ; the value to unretract while RESUME
variable_speed_unretract : 35.0  ; unretract speed in mm/s
variable_speed_hop       : 15.0  ; z move speed in mm/s
variable_speed_move      : 80.0 ; move speed in mm/s
variable_park_at_cancel  : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True,False]
variable_park_at_cancel_x : 10  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 200  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract  : False ; use fw_retraction instead of the manual version [True/False] 
variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored

variable_my_load_len : 65.0
variable_my_load_prime_len: 44.0
variable_my_unload_len: 50.0
variable_my_purge_len: 50.0

variable_automeshed: False
gcode:

###### END Variables ###### 

[virtual_sdcard]
path: ~/printer_data/gcodes
on_error_gcode: 
  RESPOND TYPE=command MSG='Vritual SD error triggered. Starting CANCEL_PRINT'
 CANCEL_PRINT


[gcode_macro RESET]
description: RESTART
gcode:
  RESTART


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_OLD
gcode:
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  CLEAR_PAUSE
  RESPOND TYPE=command MSG='Cancelling Print'
  PRINT_END


############## PRINT_START G-Code ###################

# ORCA SLICER: PRINT_START BED=[bed_temperature_initial_layer_single] HOTEND=[nozzle_temperature_initial_layer] AUTOMESH=1 AUTOPURGE=1
# PRUSA SLICER: PRINT_START BED=[first_layer_bed_temperature] HOTEND=[first_layer_temperature[initial_extruder]] AUTOMESH=1 AUTOPURGE=1
#
# End G-Code
# PRINT_END
[gcode_macro PRINT_START]
gcode:        
    # Parameters
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.HOTEND|int %}
    {% set autopurge = params.AUTOPURGE| default(0) | int %}
    {% set automesh = params.AUTOMESH| default(0) | int %}
 
    SAVE_GCODE_STATE NAME=print_start
    SET_VELOCITY_LIMIT VELOCITY=300 ACCEL=10000
    G90 
    M83
    M140 S{bedtemp} ; start bed heating
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bedtemp|int} MAXIMUM={bedtemp+1|int}; set & wait for bed temp  
    PROBE_LOCK
    CG28 ; home XY optional, Z strict
    Z_TILT_ADJUST SAMPLES=2
    G28 Z

    # Create mesh profiles for the following temperatures and rename them accordingly    
    {% if automesh == 0 %}
      {% if bedtemp > 95 %}
        BED_MESH_PROFILE LOAD=105
      {% elif bedtemp > 69 %}
        BED_MESH_PROFILE LOAD=75
      {% elif bedtemp > 45 %}
        BED_MESH_PROFILE LOAD=60
      {% endif %}
      G1 X10 Y10 Z20 F5000 ; safe spot to heat up nozzle
    {% else %}
      BED_MESH_CLEAR
      BED_MESH_CALIBRATE ; KAMP
      SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE=automeshed VALUE=True
    {% endif %}

    PROBE_UNLOCK
    PROBE_DETACH

    # SMART_PARK
    G1 X20 Y30 F3000  ; safe spot to heat up nozzle

    M104 S{hotendtemp} ; start hotend heating
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={hotendtemp|int} MAXIMUM={hotendtemp+1|int}     ; set & wait for hotend temp

    {% if autopurge == 0 %}
      G1 E12.5 F600 # reload
    {% else %}
      LINE_PURGE ; KAMP
    {% endif %}
    
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} 
    G92 E0 ; Reset Extruder
    RESPOND TYPE=command MSG='Print Started'
    RESTORE_GCODE_STATE NAME=print_start
    G90


[gcode_macro PRINT_END]
gcode:
    {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
    #TIME_PRINT END=1
    RESPOND TYPE=command MSG='Print Ended'
    
    M400 ; Wait for buffer to clear
    G90 ; Absolute pos
    M83 ; Relative Extrude
    G92 E0 ; Reset Extruder
    G1 E-0.5 F2100
    G1 E-9 F600
    TURN_OFF_HEATERS # Safety call in case Park Macro Fails
    _TOOLHEAD_PARK_PAUSE_CANCEL
    OFF
    {% if client.automeshed == True %}
      BED_MESH_CLEAR
      BED_MESH_PROFILE REMOVE=default
    {% endif %}
    M117 Done!


[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    M107                                 ; turn print cooling fan off
    #SET_FAN_SPEED FAN=Exhaust SPEED=0   ; turn exhaust fan off
    #SET_FAN_SPEED FAN=BedFans SPEED=0   ; bed fan off
    #SET_PIN PIN=caselight VALUE=0       ; turn case light off
    RESPOND TYPE=command MSG='All OFF'


[gcode_macro AWD_SYNC]
description: Remember to move the bed to the center and disconnect the front stepper pulley
gcode:
  {% set axis = params.AXIS|default("y")|string %} %}
  {% set accel = params.ACCEL|default(40000)|float %}
  {% set v = params.VELOCITY|default(300)|float %}
  {% set dist = params.DISTANCE|default(4.0)|float %}
  {% set count = params.COUNT|default(10)|int %}
  {% set go = params.PULLEY_DISCONNECTED|default(0)|int %}
  
  {% if go == 1 %}
    G91
    RESPOND TYPE=command MSG='Remember to move the carriage in the center and disconnect one of the pulleys.'
  
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis+"1"} ENABLE=1
    G4 P500
    RESPOND TYPE=command MSG='{"stepper_"+axis+"1 Enabled"}'
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis} ENABLE=0
    G4 P500
    RESPOND TYPE=command MSG='{"stepper_"+axis+" Disabled"}' 
  
    RESPOND TYPE=command MSG='Equalising tension between locked stepper and carriage'
    {% for i in range((count/2)|int) %}
    FORCE_MOVE STEPPER={ "stepper_"+axis+"1" } DISTANCE={+dist*4 } VELOCITY={ v/3 } ACCEL={ accel/3 }
    FORCE_MOVE STEPPER={ "stepper_"+axis+"1" } DISTANCE={ -dist*4 } VELOCITY={ v/3 } ACCEL={ accel/3 }
    {% endfor %}
    {% for i in range(count) %}
    FORCE_MOVE STEPPER={ "stepper_"+axis+"1" } DISTANCE={ +dist/7 } VELOCITY={ v } ACCEL={ accel }
    FORCE_MOVE STEPPER={ "stepper_"+axis+"1" } DISTANCE={ -dist/7 } VELOCITY={ v } ACCEL={ accel }
    {% endfor %}
  
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis+"1"} ENABLE=0
    G4 P500
    RESPOND TYPE=command MSG='{"stepper_"+axis+"1 Disabled"}'
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis} ENABLE=0
    G4 P500
    RESPOND TYPE=command MSG='{"stepper_"+axis+" Disabled"}'  
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis} ENABLE=1
    G4 P500
    RESPOND TYPE=command MSG='{"stepper_"+axis+" Enabled"}'  
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis+"1"} ENABLE=1
    G4 P500
    RESPOND TYPE=command MSG='{"stepper_"+axis+"1 Enabled"}'
    SET_KINEMATIC_POSITION X=127 Y=127 Z=0
    G4 P500
    RESPOND TYPE=command MSG='Kinematic Position Set'
    G1 {axis}1 F{150*60}
    G4 P1000
    G1 {axis}-1 F{150*60}
    G90
    G4 P1000
    RESPOND TYPE=command MSG='Shaking Axis'
    {% for i in range((count/4)|int) %}
    FORCE_MOVE STEPPER={ "stepper_"+axis } DISTANCE={ +dist } VELOCITY={ 6 } ACCEL={ accel/4 }
    FORCE_MOVE STEPPER={ "stepper_"+axis } DISTANCE={ -dist } VELOCITY={ 6 } ACCEL={ accel/4 }
    {% endfor %}
    {% for i in range(count) %}
    FORCE_MOVE STEPPER={ "stepper_"+axis } DISTANCE={ -dist/7 } VELOCITY={ v } ACCEL={ accel }
    FORCE_MOVE STEPPER={ "stepper_"+axis } DISTANCE={ +dist/7 } VELOCITY={ v } ACCEL={ accel }
    {% endfor %}
    RESPOND TYPE=command MSG='Cycling steppers On and Off'
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis+"1"} ENABLE=0
    G4 P500
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis} ENABLE=0
    G4 P500
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis} ENABLE=1
    G4 P500
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis+"1"} ENABLE=1
    G4 P500
    RESPOND TYPE=command MSG='{"Done! Stepper_"+axis+" and "+"stepper_"+axis+"1 Synced. Please lock your pulley first and disable the motors after!"}'
  {% else %}
    RESPOND TYPE=command MSG="First move the bed to center, disconnect one of the Y stepper pulleys, and change PULLEY_DISCONNECTED value to 1"
  {% endif %}


##### Quiet Modes #####

[gcode_macro Qmode]
variable_flag: 0
variable_accel: 0
variable_accel_to_decel: 0
variable_velocity: 0
variable_square_corner_velocity: 0
variable_pressure_advance:0.0
variable_fan0_value: 0.00
variable_fan1_value: 0.00
variable_fan2_value: 0.00
variable_speed_factor: 0
gcode:
  {% set printer_state = printer.print_stats.state %}
  {% if printer['gcode_macro Qmode'].flag|int == 0 %}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=accel VALUE={printer.toolhead.max_accel}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=accel_to_decel VALUE={printer.toolhead.max_accel_to_decel}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=velocity VALUE={printer.toolhead.max_velocity}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=square_corner_velocity VALUE={printer.toolhead.square_corner_velocity}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=pressure_advance VALUE={printer.extruder.pressure_advance}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=speed_factor VALUE={printer.gcode_move.speed_factor}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=fan0_value VALUE={printer.fan.speed}   

      SET_GCODE_VARIABLE MACRO=M106 VARIABLE=max_fan VALUE=80

      SET_TMC_FIELD STEPPER=stepper_x FIELD=TPWMTHRS value=0
      SET_TMC_FIELD STEPPER=stepper_y FIELD=TPWMTHRS value=0
      SET_TMC_FIELD STEPPER=stepper_y1 FIELD=TPWMTHRS value=0
      SET_TMC_FIELD STEPPER=stepper_z FIELD=TPWMTHRS value=0
      SET_TMC_FIELD STEPPER=stepper_z1 FIELD=TPWMTHRS value=0

      # Set Motion Parameters
      SET_VELOCITY_LIMIT ACCEL=5000
      SET_VELOCITY_LIMIT ACCEL_TO_DECEL=2500
      SET_VELOCITY_LIMIT VELOCITY=200
      SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5
      # SET_PRESSURE_ADVANCE ADVANCE=0.05
      M220 S50
      
      {% if printer.fan.speed>(80/255) %}
          M106 S80
      {% endif %}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=flag VALUE=1
      RESPOND TYPE=command MSG='Quiet Mode Active'
  {% endif %}


[gcode_macro Qmode_exit]
gcode:
  {% set printer_state = printer.print_stats.state %}
  {% if printer['gcode_macro Qmode'].flag|int == 1 %}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=flag VALUE=0
      SET_VELOCITY_LIMIT ACCEL={printer['gcode_macro Qmode'].accel}
      SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer['gcode_macro Qmode'].accel_to_decel}
      SET_VELOCITY_LIMIT VELOCITY={printer['gcode_macro Qmode'].velocity}
      SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer['gcode_macro Qmode'].square_corner_velocity}
      SET_PRESSURE_ADVANCE ADVANCE={printer['gcode_macro Qmode'].pressure_advance}
      M220 S{printer['gcode_macro Qmode'].speed_factor * 100}

      SET_GCODE_VARIABLE MACRO=M106 VARIABLE=max_fan VALUE=255
      M106 S{printer['gcode_macro Qmode'].fan0_value*255}

      SET_TMC_FIELD STEPPER=stepper_x FIELD=TPWMTHRS value=1048575
      SET_TMC_FIELD STEPPER=stepper_y FIELD=TPWMTHRS value=1048575
      SET_TMC_FIELD STEPPER=stepper_y1 FIELD=TPWMTHRS value=1048575
      SET_TMC_FIELD STEPPER=stepper_z FIELD=TPWMTHRS value=1048575
      SET_TMC_FIELD STEPPER=stepper_z1 FIELD=TPWMTHRS value=1048575

      RESPOND TYPE=command MSG='Quiet Mode Disabled'

    {% endif %}


[gcode_macro SET_VELOCITY_LIMIT] # Set Velocity Limits 
rename_existing:            _SET_VELOCITY_LIMIT
gcode:
    {% if printer['gcode_macro Qmode'].flag|int == 0 %}
    {% set get_params = "" %}
    {% if 'VELOCITY' in params %}
      {% set get_params = (get_params + ' ' + 'VELOCITY=' + params.VELOCITY) %}
    {% endif %}
    {% if 'ACCEL' in params %}
      {% set get_params = (get_params + ' ' + 'ACCEL=' + params.ACCEL) %}
    {% endif %}
    {% if 'ACCEL_TO_DECEL' in params %}
      {% set get_params = (get_params + ' ' + 'ACCEL_TO_DECEL=' + params.ACCEL_TO_DECEL) %}
    {% endif %}
    {% if 'SQUARE_CORNER_VELOCITY' in params %}
      {% set get_params = (get_params + ' ' + 'SQUARE_CORNER_VELOCITY=' + params.SQUARE_CORNER_VELOCITY) %}
    {% endif %}
    _SET_VELOCITY_LIMIT { get_params }
  {% endif %}


[gcode_macro M204]
rename_existing:            M204.1
variable_accel_factor: 1.0
variable_accel_to_decel_factor: 1.0
gcode:
    {% set vars = printer["gcode_macro M204"] %}
    {% if 'P' in params %}
      {% set my_s = params.P %}
    {% elif 'S' in params %}
      {% set my_s = params.S %}
    {% elif 'T' in params %}
      {% set my_s = params.T %}
    {% endif %}

    {% if my_s is defined %}
      {% set S = my_s|float %}
      {% set accel = S * vars.accel_factor %}
      {% set accel_to_decel = S * vars.accel_factor * vars.accel_to_decel_factor %}
      SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel_to_decel}
    {% endif %}


[gcode_macro M106] #Fan
rename_existing:            M106.1
variable_max_fan: 255.0
variable_manual_fan: 0
gcode:
    {% set vars = printer["gcode_macro M106"] %}
    {% if vars.manual_fan == 0 %}
      {% if 'S' in params %}
        {% set S = params.S|float %}
        {% if S > vars.max_fan %}
          {% set S = vars.max_fan %}
        {% endif %}
        M106.1 S{'%d' % (S)}
        {% endif %}
    {% else %}
      {% set S = vars.max_fan %}
      M106.1 S{'%d' % (S)}
    {% endif %}

    
[gcode_macro MAX_FAN]
description: Set max fan speed or override it to manual control
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set MAX_FAN_P= params.MAX_FAN | default(100) | int %}
  {% set MANUAL_FAN_P= params.MANUAL_FAN | default(0) | int %}
  {% set S = MAX_FAN_P/100*255|float %}
  SET_GCODE_VARIABLE MACRO=M106 VARIABLE=max_fan VALUE={S}
  SET_GCODE_VARIABLE MACRO=M106 VARIABLE=manual_fan VALUE={MANUAL_FAN_P}
  RESPOND TYPE=command MSG='Updated Max Fan'


##### Force Moves ##########

[gcode_macro FORCE_Z_UP]
description: Force moves toolhead up by 20mm. Be careful!
gcode:
  SET_KINEMATIC_POSITION X=127 Y=127 Z=150
  G90
  G1 Z180
  M84


[gcode_macro FORCE_Z_DOWN]
description: description: Force moves toolhead down by 20mm. Be careful!
gcode:
  SET_KINEMATIC_POSITION X=127 Y=127 Z=150
  G90
  G1 Z130
  M84


[gcode_macro SET_KINEMATIC]
description: Set toolhead position without homing. Be careful!
gcode:
    {% set K_X = params.X| default(118) | float %}
    {% set K_Y = params.Y| default(141) | float %}
    {% set K_Z = params.Z| default(0) | float %}

    SET_KINEMATIC_POSITION X={K_X} Y={K_Y} Z={K_Z}
    G91
    G1 X1 Y1 Z1
    G90


[gcode_macro M600]
description: Filament change
gcode: 
  PAUSE X=10 Y=10 Z_MIN=50
  FILAMENT_UNLOAD
  M117 Insert new filament


[gcode_macro FILAMENT_LOAD]
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set EXTRUDER_TEMP = params.TEMP | default(230) | int %}
  M109 S{EXTRUDER_TEMP}            #set hotend temperature and wait
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP}

  SAVE_GCODE_STATE NAME=load_state
  ;M106 S0 ; Turn off fan
  M83                            ; set extruder to relative
  G1 E{client.my_load_len} F800                    ; load
  G1 E{client.my_load_prime_len} F250                    ; prime nozzle with filament
  G1 E-8 F600
  RESTORE_GCODE_STATE NAME=load_state


[gcode_macro FILAMENT_UNLOAD]
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set EXTRUDER_TEMP = params.TEMP | default(230) | int %}
  M109 S{EXTRUDER_TEMP}            #set hotend temperature and wait
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP}
  SAVE_GCODE_STATE NAME=unload_state
  ;M106 S0 ; Turn off fan
  M83                            ; set extruder to relative
  G0 E2 F300                                      ; extract filament to cold end
  G0 E-8 F2000                                      ; extract filament to cold end
  G4 P4000                                                  ; wait for 4 seconds
  G0 E8 F2000                                       ; push back the filament to strive stringing
  G0 E-27 F2150                                    ; Extract fast in the cold zone
  G1 E-{client.my_unload_len} F300 ; pull rest                                    ; continue extraction slow allow filament to be cooled enough before reaches the gears
 RESTORE_GCODE_STATE NAME=unload_state


[gcode_macro FILAMENT_PURGE]
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  SAVE_GCODE_STATE NAME=purge_state
  ;M106 S0 ; Turn off fan
  M83    
  G1 E{client.my_purge_len} F250                    ; prime nozzle with filament
  RESTORE_GCODE_STATE NAME=purge_state


[gcode_macro CG28]
description: Home Z but skip X and Y if already homed
gcode:
  {% set th = printer.toolhead %}
  {% if "x" in th.homed_axes %} # If X-Axis homed.
      M118 X-Axis Already Homed...
  {% else %} # If X-Axis not homed.
          M118 Homing X-Axis...
          G28 X
  {% endif %}
  {% if "y" in th.homed_axes %} # If Y-Axis homed.
      M118 Y-Axis Already Homed...
  {% else %} # If Y-Axis not homed.
      M118 Homing Y-Axis...
      G28 Y
  {% endif %}
  M118 Homing Z-Axis...
  G28 Z


[gcode_macro CGS28]
description: Don't home if already homed
gcode:
  {% set th = printer.toolhead %}
  {% if "z" in th.homed_axes %} # If X-Axis homed.
      M118 Axis Already Homed...
  {% else %} # If X-Axis not homed.
      CG28
  {% endif %}

[gcode_macro M109] # Wait Hotend Temp
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}


[gcode_macro M190] # Wait Bed Temp
rename_existing: M190.1
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}

# Ellis' Park Macros https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/parking.html

# Park front center
[gcode_macro PARKFRONT]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000        
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park front center, but low down.
[gcode_macro PARKFRONTLOW]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park top rear left
[gcode_macro PARKREAR]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKREAR
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000     
    RESTORE_GCODE_STATE NAME=PARKREAR

# Park at center of build volume
[gcode_macro PARKCENTER]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000    
    RESTORE_GCODE_STATE NAME=PARKCENTER

# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro Z_OFFSET_PRINT]
description: Calculates the probe min/max/current coordinates
gcode: 
    {% set config = printer.configfile.config %}
    # Find probe config in configfile
    {% if config["probe"] %}
        # probe section found
        {% set probe = config["probe"] %}
        {% set has_probe = True %}
    {% else %}
        # No probe or bltouch sections found
        RESPOND MSG="Failed to detect probe in configfile"
    {% endif %}
    {% if has_probe %}
        RESPOND MSG="Configured Probe Z-Offset {probe.z_offset}"
    {% endif %}
