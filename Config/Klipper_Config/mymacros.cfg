##### Variables #####

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos  : True ; use custom park coordinates for x,y [True/False] 
variable_custom_park_x   : 10.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y   : 200.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz  : 80.0   ; custom dz value; the value in mm to lift the nozzle when move to park position 
variable_retract         : 1.0   ; the value to retract while PAUSE
variable_cancel_retract  : 3.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract   : 35.0  ; retract speed in mm/s
variable_unretract       : 1.0   ; the value to unretract while RESUME
variable_speed_unretract : 35.0  ; unretract speed in mm/s
variable_speed_hop       : 15.0  ; z move speed in mm/s
variable_speed_move      : 80.0 ; move speed in mm/s
variable_park_at_cancel  : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True,False]
variable_park_at_cancel_x : 10  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 200  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract  : False ; use fw_retraction instead of the manual version [True/False] 
variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored


### Custom Variables ##

# Filament Load
variable_my_load_len : 65.0
variable_my_load_prime_len: 44.0
variable_my_unload_len: 50.0
variable_my_purge_len: 50.0

# Aux Fan
variable_has_aux_fan: False    ; Aux fan should be defined as [fan_generic aux] in printer.cfg
variable_is_aux_linked: True  ; Linking Aux fan speeds with Part fan
variable_aux_ratio: 1  ; Ratio between Part fan and Aux when linked. 0.75 equals 75% of the Part fan speed

# Quiet Mode
variable_q_fan_max: 34 ; 0-100 - fan speeds defined as percentages: 0-100
variable_q_fan_aux: 14 ; 0-100
variable_q_feedrate: 80 ; 0-100
variable_q_velocity: 200
variable_q_accel: 5000
variable_q_accel_decel: 2500
variable_q_scv: 5
variable_q_pa_mult: 1.0  

# Utility
variable_automeshed: False    ; Do not set this variable. It is used internally by other macros to track the autogenerated KAMP mesh.


gcode:


##### Macros #####

[virtual_sdcard]
path: ~/printer_data/gcodes
on_error_gcode: 
  RESPOND TYPE=command MSG='Vritual SD error triggered. Starting CANCEL_PRINT'
  CANCEL_PRINT
  OFF

[gcode_macro RESET]
description: RESTART
gcode:
  RESTART



##### Slicer Macros #####

[gcode_macro PRINT_START_MICRO]
gcode:        
    # Parameters
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.HOTEND|int %}
    {% set autopurge = params.AUTOPURGE| default(0) | int %}
    {% set automesh = params.AUTOMESH| default(0) | int %}
  
    SAVE_GCODE_STATE NAME=print_start
    SET_VELOCITY_LIMIT VELOCITY=300 ACCEL=10000 ; Lower velocity for setup moves
    G90 
    M83
    M190 S{bedtemp} ; Heat bed
    PROBE_LOCK
    G28 ; home
    Z_TILT_ADJUST SAMPLES=1 ACCURACY=1
    Z_TILT_ADJUST SAMPLES=2
    G28 Z
    {% if automesh == 0 %}  ;Selecting bed mesh based on temperature. You need to have default, 80, and 105 profiles created.
      {% if bedtemp > 95 %}
        BED_MESH_PROFILE LOAD=105
      {% elif bedtemp > 69 %}
        BED_MESH_PROFILE LOAD=80
      {% else %}
        BED_MESH_PROFILE LOAD=default
      {% endif %}
    {% else %}
      BED_MESH_CLEAR
      BED_MESH_CALIBRATE ; KAMP
      SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE=automeshed VALUE=True
    {% endif %}

    PROBE_UNLOCK
    PROBE_DETACH
    G1 X20 Y20 Z20 F3000  ; Safe spot to heat up nozzle
    M109 S{hotendtemp} ; Heat hotend

    {% if autopurge == 0 %}
      G1 E12.5 F600 ; Prime nozzle
    {% else %}
      LINE_PURGE ; KAMP
    {% endif %}
    
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel}  ; Restore velocity to default
    G92 E0 ; Reset Extruder
    RESPOND TYPE=command MSG='Print Started'
    RESTORE_GCODE_STATE NAME=print_start
    G90


[gcode_macro PRINT_END]
gcode:
    G91 ; Absolute pos
    M83 ; Relative Extrude
    G92 E0 ; Reset Extruder
    G1 E-0.2 F{60*60} ; Retract End
    G1 X-15 Z2 E-0.8 F{60*600} ; Retract End
    G1 E-5 F{10*60} ; Retract Tip Form 
    G1 E2 F{80*60}
    G1 E-6 F{10*60}
      
    {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
    TURN_OFF_HEATERS # Safety call in case Park Fails
    RESPOND TYPE=command MSG='Print Ended! Turning things off.'
    {% if client.automeshed == True %}  ; Clear KAMMP Bed Mesh
      BED_MESH_CLEAR
      BED_MESH_PROFILE REMOVE=default
    {% endif %}

    G90 ; Absolute pos
    _TOOLHEAD_PARK_PAUSE_CANCEL
    OFF
    M117 Done!


[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    M107                                 ; turn fans off
    #SET_FAN_SPEED FAN=Exhaust SPEED=0   ; turn exhaust fan off
    #SET_FAN_SPEED FAN=BedFans SPEED=0   ; bed fan off
    #SET_PIN PIN=caselight VALUE=0       ; turn case light off
    RESPOND TYPE=command MSG='All OFF'


[gcode_macro M109] # Wait Hotend Temp
rename_existing: M109.1
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}


[gcode_macro M190] # Wait Bed Temp
rename_existing: M190.1
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}



##### Quiet Modes #####

[gcode_macro Qmode]
variable_flag: 0
variable_accel: 0
variable_accel_to_decel: 0
variable_velocity: 0
variable_square_corner_velocity: 0
variable_pressure_advance:0.0
variable_fan_value: 0.00
variable_fan_aux_value: 0.00
variable_fan2_value: 0.00
variable_speed_factor: 0
gcode:
  {% set printer_state = printer.print_stats.state %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% if printer['gcode_macro Qmode'].flag|int == 0 %}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=accel VALUE={printer.toolhead.max_accel}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=accel_to_decel VALUE={printer.toolhead.max_accel_to_decel}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=velocity VALUE={printer.toolhead.max_velocity}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=square_corner_velocity VALUE={printer.toolhead.square_corner_velocity}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=pressure_advance VALUE={printer.extruder.pressure_advance}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=speed_factor VALUE={printer.gcode_move.speed_factor}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=fan_value VALUE={printer.fan.speed}
      {% if client.has_aux_fan == True %}
        SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=fan_aux_value VALUE={printer['fan_generic aux'].speed}
      {% endif %}
      
 

      SET_TMC_FIELD STEPPER=stepper_x FIELD=TPWMTHRS value=0
      SET_TMC_FIELD STEPPER=stepper_y FIELD=TPWMTHRS value=0
      SET_TMC_FIELD STEPPER=stepper_y1 FIELD=TPWMTHRS value=0
      SET_TMC_FIELD STEPPER=stepper_z FIELD=TPWMTHRS value=0
      SET_TMC_FIELD STEPPER=stepper_z1 FIELD=TPWMTHRS value=0

      # Set Motion Parameters
      M220 S{client.q_feedrate} #set feedrate
      SET_VELOCITY_LIMIT VELOCITY={client.q_velocity}
      SET_VELOCITY_LIMIT ACCEL={client.q_accel}
      SET_VELOCITY_LIMIT ACCEL_TO_DECEL={client.q_accel_decel}
      SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={client.q_scv}
      SET_PRESSURE_ADVANCE ADVANCE={printer.extruder.pressure_advance*client.q_pa_mult}

     # Set Fan Parameters
     SET_GCODE_VARIABLE MACRO=M106 VARIABLE=max_fan VALUE={client.q_fan_max*2.54}
    
      {% if printer.fan.speed>(100/client.q_fan_max) %}
          M106 S{client.q_fan_max*2.54}
      {% endif %}
      {% if client.has_aux_fan == True and printer['fan_generic aux'].speed>100/client.q_fan_aux %}
         M106 P2 S{client.q_fan_aux*2.54}
      {% endif %}
      
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=flag VALUE=1
      RESPOND TYPE=command MSG='Quiet Mode Active'
  {% endif %}


[gcode_macro Qmode_exit]
gcode:
  {% set printer_state = printer.print_stats.state %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% if printer['gcode_macro Qmode'].flag|int == 1 %}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=flag VALUE=0
      SET_VELOCITY_LIMIT ACCEL={printer['gcode_macro Qmode'].accel}
      SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer['gcode_macro Qmode'].accel_to_decel}
      SET_VELOCITY_LIMIT VELOCITY={printer['gcode_macro Qmode'].velocity}
      SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer['gcode_macro Qmode'].square_corner_velocity}
      SET_PRESSURE_ADVANCE ADVANCE={printer['gcode_macro Qmode'].pressure_advance}
      M220 S{printer['gcode_macro Qmode'].speed_factor * 100}

      SET_GCODE_VARIABLE MACRO=M106 VARIABLE=max_fan VALUE=255
      M106 S{printer['gcode_macro Qmode'].fan_value*255}
      {% if client.has_aux_fan == True %}
         M106 P2 S{printer['gcode_macro Qmode'].fan_aux_value*255}
      {% endif %}

      SET_TMC_FIELD STEPPER=stepper_x FIELD=TPWMTHRS value=1048575
      SET_TMC_FIELD STEPPER=stepper_y FIELD=TPWMTHRS value=1048575
      SET_TMC_FIELD STEPPER=stepper_y1 FIELD=TPWMTHRS value=1048575
      SET_TMC_FIELD STEPPER=stepper_z FIELD=TPWMTHRS value=1048575
      SET_TMC_FIELD STEPPER=stepper_z1 FIELD=TPWMTHRS value=1048575

      RESPOND TYPE=command MSG='Quiet Mode Disabled'

    {% endif %}



##### Acceleration #####

[gcode_macro SET_VELOCITY_LIMIT] # Set Velocity Limits 
rename_existing:            _SET_VELOCITY_LIMIT
gcode:
    {% if printer['gcode_macro Qmode'].flag|int == 0 %}
    {% set get_params = "" %}
    {% if 'VELOCITY' in params %}
      {% set get_params = (get_params + ' ' + 'VELOCITY=' + params.VELOCITY) %}
    {% endif %}
    {% if 'ACCEL' in params %}
      {% set get_params = (get_params + ' ' + 'ACCEL=' + params.ACCEL) %}
    {% endif %}
    {% if 'ACCEL_TO_DECEL' in params %}
      {% set get_params = (get_params + ' ' + 'ACCEL_TO_DECEL=' + params.ACCEL_TO_DECEL) %}
    {% endif %}
    {% if 'SQUARE_CORNER_VELOCITY' in params %}
      {% set get_params = (get_params + ' ' + 'SQUARE_CORNER_VELOCITY=' + params.SQUARE_CORNER_VELOCITY) %}
    {% endif %}
    _SET_VELOCITY_LIMIT { get_params }
  {% endif %}


[gcode_macro M204] # Set Acceleration
rename_existing:            M204.1
variable_accel_factor: 1.0
variable_accel_to_decel_factor: 1.0
gcode:
    {% set vars = printer["gcode_macro M204"] %}
    {% if 'P' in params %}
      {% set my_s = params.P %}
    {% elif 'S' in params %}
      {% set my_s = params.S %}
    {% elif 'T' in params %}
      {% set my_s = params.T %}
    {% endif %}

    {% if my_s is defined %}
      {% set S = my_s|float %}
      {% set accel = S * vars.accel_factor %}
      {% set accel_to_decel = S * vars.accel_factor * vars.accel_to_decel_factor %}
      SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel_to_decel}
    {% endif %}



##### Fans #####

[gcode_macro M106] #Set Fan
rename_existing:            M106.1
# Fan speeds defined as percentages: 0-100
variable_max_fan: 100
variable_manual_fan: 0
variable_manual_aux: 0
variable_fan_multiplier: 1.0

gcode:
    {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
    {% set vars = printer["gcode_macro M106"] %}
        
    {% if 'S' in params and params.P is not defined %} ; P2 value is not present
      {% if vars.manual_fan == 0 %}
        {% set S = params.S|float %}
        {% set S = S * vars.fan_multiplier|round|int %} 
        {% if S > vars.max_fan*2.55 %}
          {% set S = vars.max_fan*2.55|round|int %} ; capped mode
        {% endif %}   
      {% else %}
          {% set S = vars.manual_fan*2.55|round|int %} ; manual mode
      {% endif %}
    {% endif %}
    {% if 'S' in params and params.P is defined %} ; When P2 value is present
      {% if client.has_aux_fan == True and client.is_aux_linked == False %} ; unlinked aux mode
      {% if vars.manual_aux > 0 %}
          SET_FAN_SPEED FAN=aux SPEED={manual_aux/100}
        {% else %}
          SET_FAN_SPEED FAN=aux SPEED={S/255}
        {% endif %}
      {% endif %}
    {% elif 'S' in params %}  ; When P2 value is not present
      M106.1 S{'%d' % (S)}
      {% if client.has_aux_fan == True and client.is_aux_linked == True %}  
        SET_FAN_SPEED FAN=aux SPEED={(S/255)*client.aux_ratio}  ; linked aux mode
      {% endif %}
    {% endif %}

    
[gcode_macro MAX_FAN] #Set Fan UI
description: Set max fan speed or override it to manual control
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set fanvar = printer["gcode_macro M106"] %}
  
  {% set MAX_FAN_P= params.MAX_FAN | default(fanvar.max_fan) | int %}
  {% set MANUAL_FAN_P= params.MANUAL_FAN | default(fanvar.manual_fan) | int %}
  {% set MANUAL_AUX_P= params.MANUAL_AUX | default(fanvar.manual_aux) | int %}
  {% set FAN_MULTIPLIER_P= params.FAN_MULTIPLIER | default(fanvar.fan_multiplier) | float %}
  {% set LINK_AUX_P= params.LINK_AUX | default(client.is_aux_linked) | int %}
  {% set AUX_RATIO_P= params.AUX_RATIO | default(client.aux_ratio) | float %}
  
  SET_GCODE_VARIABLE MACRO=M106 VARIABLE=max_fan VALUE={MAX_FAN_P}
  SET_GCODE_VARIABLE MACRO=M106 VARIABLE=manual_fan VALUE={MANUAL_FAN_P}
  SET_GCODE_VARIABLE MACRO=M106 VARIABLE=manual_aux VALUE={MANUAL_AUX_P}
  SET_GCODE_VARIABLE MACRO=M106 VARIABLE=fan_multiplier VALUE={FAN_MULTIPLIER_P}
  SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE=is_aux_linked VALUE={LINK_AUX_P}
  SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE=aux_ratio VALUE={AUX_RATIO_P}

  {% if MANUAL_FAN_P > 0 %}
      M106 S{MANUAL_FAN_P}
  {% endif %}
  
  RESPOND TYPE=command MSG='Updated Max Fan'


[gcode_macro M107] # Fans OFF
rename_existing:            M107.1
gcode:
    M106 S0
    M106 P2 S0



##### Filament Management #####

[gcode_macro M600]
description: Filament change
gcode: 
  PAUSE X=10 Y=10 Z_MIN=50
  FILAMENT_UNLOAD
  M117 Insert new filament


[gcode_macro FILAMENT_LOAD]
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set EXTRUDER_TEMP = params.TEMP | default(230) | int %}
  M109 S{EXTRUDER_TEMP}            #set hotend temperature and wait
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP}

  SAVE_GCODE_STATE NAME=load_state
  M83                            ; set extruder to relative
  G1 E{client.my_load_len} F800                    ; load
  G1 E{client.my_load_prime_len} F250                    ; prime nozzle with filament
  G1 E-8 F600
  RESTORE_GCODE_STATE NAME=load_state


[gcode_macro FILAMENT_UNLOAD]
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set EXTRUDER_TEMP = params.TEMP | default(230) | int %}
  M109 S{EXTRUDER_TEMP}            #set hotend temperature and wait
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP}

  SAVE_GCODE_STATE NAME=unload_state
  ;M106 S0 ; Turn off fan
  M83                            ; set extruder to relative

  G0 E2 F300                                        ; extract filament to cold end
  G0 E-8 F2000                                      ; extract filament to cold end
  G4 P4000                                          ; wait for 4 seconds
  G0 E8 F2000                                       ; push back the filament to strive stringing
  G0 E-27 F2150                                     ; Extract fast in the cold zone
  G1 E-{client.my_unload_len} F300                  ; Pull rest. Continue extraction slow allow filament to be cooled enough before reaches the gears
  RESTORE_GCODE_STATE NAME=unload_state


[gcode_macro FILAMENT_PURGE]
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  SAVE_GCODE_STATE NAME=purge_state
  ;M106 S0 ; Turn off fan
  M83    
  G1 E{client.my_purge_len} F250                    ; prime nozzle with filament
  RESTORE_GCODE_STATE NAME=purge_state


[gcode_macro COLD_PULL]  # Experimental. Requires lowering extruder print min temp
gcode:
    {% set EXTRUDER = params.EXTRUDER|default(220) %}
    {% set PULLTEMP = params.PULLTEMP|default(85) %}
    G90
    M83
    G92 E0
    M109 S{EXTRUDER} 
    M104 S{PULLTEMP}
    M106 S120   #fan on
    G1 E7 F100
    G1 E5 F5
    M109 S{PULLTEMP}
    G1 E-15 F45
    G1 E-100 F300
    G92 E0
    M106 S0
    M104 S0
    M84



##### Moves #####

[gcode_macro GO_HOME]
gcode:
  {% set home = printer.configfile.settings.xz_dockable_probe.home_xy_position.split(',') %}
  G90
  G1 x{home[0]} y{home[1]} F{150*60}
  G1 z20 F{25*60}


[gcode_macro GO_CENTER]
gcode:        
  G90 
  {% set home = printer.configfile.settings.xz_dockable_probe.home_xy_position.split(',') %}
  G1 x{home[0]} y{home[1]} Z{printer.toolhead.axis_maximum.z/2} F{200*60}


[gcode_macro GO_Z_OFFSET]
gcode:
  {% set home = printer.configfile.settings.xz_dockable_probe.home_xy_position.split(',') %}
  QD_DOCK
  G90
  G1 x{home[0]} y{home[1]} F{150*60}
  G1 z10 F{25*60}
  G1 z0 F{6*60}



 ##### Force Moves #####

[gcode_macro FORCE_UP]
gcode:
  SET_KINEMATIC_POSITION X=127 Y=127 Z=150
  G90
  G1 Z180
  M84


[gcode_macro FORCE_DOWN]
gcode:
  SET_KINEMATIC_POSITION X=127 Y=127 Z=150
  G90
  G1 Z100
  M84


[gcode_macro FORCE_GO]
gcode:
  SET_KINEMATIC_POSITION X=127 Y=127 Z=0


[gcode_macro FORCE_SET_POS]
gcode:
    {% set home = printer.configfile.settings.resonance_tester.probe_points[0] %}
    # G90

    {% set K_X = params.X| default(home[0]) | float %}
    {% set K_Y = params.Y| default(home[1]) | float %}
    {% set K_Z = params.Z| default(home[2]) | float %}

    SET_KINEMATIC_POSITION X={K_X} Y={K_Y} Z={K_Z}
    
    G91
    G1 X0.001 Y0.001 Z0.001
    G1 X-0.001 Y-0.001 Z-0.001
    G90 



##### Park by Ellis #####

# Park front center
[gcode_macro PARKFRONT]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000        
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park front center, but low down.
[gcode_macro PARKFRONTLOW]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park top rear left
[gcode_macro PARKREAR]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKREAR
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000     
    RESTORE_GCODE_STATE NAME=PARKREAR

# Park at center of build volume
[gcode_macro PARKCENTER]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000    
    RESTORE_GCODE_STATE NAME=PARKCENTER

# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKBED



#### Utilities ####

[gcode_macro VIBRATION_TEST]  # Change accel per hz in printer.cfg under resonace_holder
gcode:
  # Axis
  {% set axis = params.AXIS|string %}
  # Seconds
  {% set seconds = params.SECONDS|int %}
  #Freq
  {%set int = params.FREQ| int%}
  HOLD_RESONANCE {rawparams}



[gcode_macro AWD_SYNC]
description: Remember to move the bed to the center and disconnect the front stepper pulley
gcode:
    SET_KINEMATIC_POSITION X=117 Y=117 Z=20 
    G91
    G1 X0.001 Y0.001 Z0.001
    G1 X-0.001 Y-0.001 Z-0.001
    M84
    G4 P500
    SET_KINEMATIC_POSITION X=117 Y=117 Z=20 
    G91
    G1 X0.001 Y0.001 Z0.001
    G1 X-0.001 Y-0.001 Z-0.001
    G90 



[gcode_macro _GET_PROBE_LIMITS]
description: Calculates the probe min/max/current coordinates
gcode: 
    {% set config = printer.configfile.config %}
    # Find probe config in configfile
    {% if config["bltouch"] %}
        # bltouch section found
        {% set probe = config["bltouch"] %}
        {% set has_probe = True %}
    {% elif config["probe"] %}
        # probe section found
        {% set probe = config["probe"] %}
        {% set has_probe = True %}
    {% else %}
        # No probe or bltouch sections found
        RESPOND MSG="Failed to detect probe in configfile"
    {% endif %}
    {% if has_probe %}
        {% set stepperx = config["stepper_x"] %}
        {% set steppery = config["stepper_y"] %}
        {% set xprobemin = stepperx["position_min"]|float + probe["x_offset"]|float %} 
        {% set xprobemax = stepperx["position_max"]|float + probe["x_offset"]|float %} 
        {% set yprobemin = steppery["position_min"]|float + probe["y_offset"]|float %} 
        {% set yprobemax = steppery["position_max"]|float + probe["y_offset"]|float %}
        RESPOND MSG="Configured Probe X-Offset {probe.x_offset}"
        RESPOND MSG="Configured Probe Y-Offset {probe.y_offset}"
        RESPOND MSG="Configured Probe Z-Offset {probe.z_offset}"
        RESPOND MSG="Minimum PROBE position X={xprobemin} Y={yprobemin}" 
        RESPOND MSG="Maximum PROBE position X={xprobemax} Y={yprobemax}"
        # check if printer homed
        {% if "xyz" in printer.toolhead.homed_axes %} 
            {% set curprobex = printer.toolhead.position.x|float + probe["x_offset"]|float %} 
            {% set curprobey = printer.toolhead.position.y|float + probe["y_offset"]|float %} 
            RESPOND MSG="Current PROBE position X={curprobex} Y={curprobey}"
        {% endif %}
    {% endif %}



[gcode_macro Z_OFFSET_PRINT]
description: Calculates the probe min/max/current coordinates
gcode: 
    {% set config = printer.configfile.config %}
    # Find probe config in configfile
    {% if config["probe"] %}
        # probe section found
        {% set probe = config["probe"] %}
        {% set has_probe = True %}
    {% else %}
        # No probe or bltouch sections found
        RESPOND MSG="Failed to detect probe in configfile"
    {% endif %}
    {% if has_probe %}
        RESPOND MSG="Configured Probe Z-Offset {probe.z_offset}"
        RESPOND MSG="Last Probed value was {printer.probe.last_z_result}"
    {% endif %}



[gcode_macro DUMP_VARIABLES]  ; by Ellis
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}
