### Do not edit or include this file into printer.cfg
### REQUIRES CONFIGURATION TEMPLATE VERSION: 0.9.1

###_______________  LH STINGER PICO MMU  _____________________
### https://github.com/lhndo/LH-Stinger/wiki/Pico-MMU
### This code is licensed under a Creative Commons (4.0 International License)Attribution—Noncommercial—Share Alike




#### ------ BOOT INIT ----------


[delayed_gcode _SP_BOOT]
initial_duration: 3
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% if sp.enabled == 1 %}
    RESPOND MSG="---- LH Stinger Pico MMU Enabled ----"
    RESPOND MSG=""

    {% if printer.save_variables.variables.last_loaded_lane != -1 %}
      RESPOND MSG="SP: Loaded Extruder Lane saved: {printer.save_variables.variables.last_loaded_lane}"
    {% else %}
      RESPOND MSG="SP: No loaded LANE saved in memory"
    {% endif %}
    
    RESPOND MSG="SP: Initializing LH Stinger Pico MMU"
    {% if sp.has_guest_lane == 1 %} 
      SET_GCODE_VARIABLE MACRO=_SP_VARS VARIABLE=lanes VALUE={sp.lanes + 1}  ## extending the number of lanes to include the guest lane
    {% endif %}
    _SP_NOTIFY ACTION="boot" 
    _SP_REFRESH_STATE
    SP_INIT
    _CHECK_SETTINGS_VERSION_SP
  {% endif %}



[gcode_macro SP_INIT]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  RESPOND MSG="SP: Initializing Pico MMU"
  SET_FILAMENT_SENSOR SENSOR=sp_sensor_runout ENABLE=0
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=next_purge VALUE={sp.print_start_change_purge} ## Setting the purge amount to the user set value
  
  {% if rt.is_filament_in == 1 %}
    RESPOND MSG="SP: Inserted filament detected"

    {% if printer.save_variables.variables.last_loaded_lane == -1  %}
      RESPOND MSG="SP: WARNING! Unknown LANE loaded! Please verify your system and use SP_FORCE_SET_LOADED_LANE LANE=<0...> to manually set the loaded lane"
      RESPOND MSG="SP: WARNING! Defaulting to LANE 0! Please correct if not accurate!"
      _SP_UI_MSG MSG="Unknown LANE loaded!  Defaulting to LANE 0.  Please correct if not accurate" TITLE="WARNING"
      _SP_SET_LOADED_LANE LANE=0
      SAVE_VARIABLE VARIABLE=hotend_loaded VALUE=1
      _SP_NOTIFY ACTION="loaded" LANE=0 COMPLETE=1 ERROR=1 
    {% else %}
      RESPOND MSG="SP: >>>> Loaded LANE {printer.save_variables.variables.last_loaded_lane} <<<< "  
      _SP_NOTIFY ACTION="loaded" LANE={printer.save_variables.variables.last_loaded_lane} COMPLETE=1
    {% endif %}

  {% else %}
      {% if printer.save_variables.variables.last_loaded_lane != -1  %}
        RESPOND MSG="SP: WARNING! Last set LANE was {printer.save_variables.variables.last_loaded_lane}, but no filament is detected! Resetting lane memory"
      {% endif %}

      _SP_SET_LOADED_LANE LANE=-1
      SAVE_VARIABLE VARIABLE=hotend_loaded VALUE=0
      SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=is_filament_in VALUE=0
      RESPOND MSG="SP: Filament not present in the hotend"             
  {% endif %}

  SP_HOME
  SP_CLEAR_ERROR_CODES 
  _SP_RESET_VARIABLES
  _SP_REFRESH_STATE



### The macro below is broken into A B parts to obtain refreshed variables for error checking
[gcode_macro _SP_PRINT_START]
gcode:
  {% set lane = params.LANE| default(-1) | int %}
  {% set temp = params.TEMP| default(-1) | int %}
  {% set no_start_purge = params.NO_START_PURGE | default(0) | int %}
  {% set unload_lane = printer.save_variables.variables.last_loaded_lane | default(-1) | int %}
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set purge_amount = sp.print_start_change_purge if no_start_purge == 0 else 0 %}

  CLEAR_PAUSE
   
  {% if sp.enabled == 1  %}
    RESPOND MSG="SP: Print Start - Resetting the SP MMU"    
    _SP_REFRESH_STATE
    SP_INIT
  
    {% if lane+1 <= sp.lanes and lane >= 0 %}
   
      {% if lane != unload_lane %}        
        RESPOND MSG="SP: ----- Filament Change: LANE {unload_lane} >>>> LANE {lane} ----- "
        SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=print_start_change VALUE=1

        ## User Macro Before Change
        M400
        {% if rt.user_macros_executed == 0 %} # if user macro can be executed
          RESPOND MSG="SP: Running User BEFORE_CHANGE Macro"
          SAVE_GCODE_STATE NAME=user_macro
          _SP_BEFORE_CHANGE PRINT_START=1
          M400
          SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=user_macros_executed VALUE=1
          RESTORE_GCODE_STATE NAME=user_macro
        {% endif %}
 
        ### Filament Change Routine 
        _SP_FILAMENT_CHANGE UNLOAD_LANE={unload_lane} LOAD_LANE={lane} TEMP={temp} PURGE={purge_amount}        
        M400
        _SP_RESTORE_PA FORCE=1
        _SP_REFRESH_STATE
        M400
        _SP_PRINT_START_B


      {% else %}
        RESPOND MSG="SP: No filament change required"             
        RESPOND MSG="SP: Starting print with LANE {lane}"
        SET_FILAMENT_SENSOR SENSOR=sp_sensor_runout ENABLE=1
        SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=next_purge VALUE=0 ## Setting next purge amount to 0 since no change was required
        SP_CLEAR_ERROR_CODES
      {% endif %}
       
     {% else %}
       RESPOND TYPE=error MSG="SP: ERROR: Invalid LANE inputs. LANE {unload_lane} and loading LANE {lane}"
       _SP_NOTIFY ACTION="empty" COMPLETE=1 ERROR=1 
       _SP_SET_EXIT_CODE CODE=1
     {% endif %}

    _SP_REFRESH_STATE   

  {% else %}
    RESPOND MSG="The SP MMU is not enabled for this print"
  {% endif %}



[gcode_macro _SP_PRINT_START_B]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  
  {% if sp.enabled == 1 %}
  
    {% if rt.exit_code == 0 %}

      ## User Macro After Change
      M400
      {% if rt.user_macros_executed == 1 %}
        RESPOND MSG="SP: Running User AFTER_CHANGE Macro"
        SAVE_GCODE_STATE NAME=user_macro
        _SP_AFTER_CHANGE PRINT_START=1
        M400
        RESTORE_GCODE_STATE NAME=user_macro
      {% endif %}  

      RESPOND MSG="SP: Continuing. Please wait"
      RESPOND MSG="SP: Enabling filament runout sensor"
      SET_FILAMENT_SENSOR SENSOR=sp_sensor_runout ENABLE=1
      _SP_REFRESH_STATE
      M104 S0 # Turn off hotend before the actual print start
      
    {% else %}
      RESPOND TYPE=error MSG="SP: Turning off hotend and PAUSING"
      M104 S0 # Turn off hotend for safety
      SP_HOME
      _SP_NOTIFY ACTION="pause" ERROR=1 
      
      PAUSE
    {% endif %}
    _SP_REFRESH_STATE
    SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=user_macros_executed VALUE=0  ## Clearing execution even if print start change fails
  {% endif %} 



[gcode_macro _SP_PRINT_END]
gcode:
  RESPOND MSG="SP: ---- Print Ended ----"
  RESPOND MSG="SP: Resetting LH Stinger Pico MMU "
  RESPOND MSG=""
  _SP_NOTIFY ACTION="print_end" 
  _SP_SHOW_STATISTICS
  _SP_REFRESH_STATE
  SP_INIT



### Implementation for RatOS T0 conflict
### The T macros are commented in pico_mmu.cfg
### In Orca Slicer add Change filament G-code: SP_CHANGE T=[next_extruder]
[gcode_macro SP_CHANGE]
gcode:
  _SP_REFRESH_STATE   
  _SP_TOOL_CHANGE LANE={params.T|int}



[gcode_macro _SP_TOOL_CHANGE]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set runout = params.RUNOUT | default (0) | int %}
  
  
  {% if sp.enabled == 1 %}

    {% if params.LANE %}
      {% set lane = params.LANE | int %}
      {% set unload_lane = printer.save_variables.variables.last_loaded_lane | default(-1) | int %}
  
      {% if lane != unload_lane %}          
        {% if rt.active != 1  %} 
          RESPOND MSG="SP: MMU not active yet. Initializing the SP MMU"
          SP_INIT
        {% endif %}     

        # Main pause that starts the change
        _SP_REFRESH_STATE
        _SP_PAUSE LANE={lane} RUNOUT={runout}
     
      {% else %}
        RESPOND MSG="SP: LANE {lane} already loaded. No change required"
      {% endif %} 

    {% else %}
      RESPOND TYPE=error MSG="SP: LANE parameter missing"
      _SP_SET_EXIT_CODE CODE=1
    {% endif %}
    
  {% endif %}




#### ------ MANUAL COMMANDS ----------


[gcode_macro SP_FORCE_SET_LOADED_LANE]
gcode:
  {% if params.LANE %}
    _SP_SET_LOADED_LANE LANE={params.LANE | int}
    _SP_NOTIFY ACTION="loading" LANE={params.LANE | int} COMPLETE=1

    {% set loaded = 0 if params.LANE|int == -1 else 1 %}
    {% set msg = "SP: Hotend Marked as LOADED" if loaded == 1 else "SP: Hotend Marked as EMPTY" %}
    RESPOND MSG="{msg}"
    RESPOND MSG="SP: Loaded Lane set to: {params.LANE}"
    SAVE_VARIABLE VARIABLE=hotend_loaded VALUE={loaded}

  {% else %}
    RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...> or LANE=-1 for no loaded lane"
  {% endif %}
  _SP_REFRESH_STATE

  

[gcode_macro SP_FORCE_MOVE_LANE]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set dist = params.DIST|default(-40) | int %}
  
  {% if rt.selected_servo_lane >= 0 and not params.LANE %}
     RESPOND MSG="SP: Moving previously selected lane. LANE: {rt.selected_servo_lane} "
     _SP_LANE_SELECT LANE={rt.selected_servo_lane}
     _SP_MOTOR {rawparams} STOP=0 DIST={dist}
  
  {% else %}
    {% if params.LANE %}
    _SP_LANE_SELECT LANE={params.LANE | int}
    _SP_MOTOR {rawparams} STOP=0 DIST={dist}
  
    {% else %}
      RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...> "
    {% endif %}
  
  {% endif %}
  _SP_REFRESH_STATE
  



[gcode_macro SP_LOAD_EXTRUDER]
gcode:
  {% set tmp = params.LANE %}
  SP_CLEAR_ERROR_CODES
  _SP_LOAD_EXTRUDER {rawparams}
  SP_HOME
  _SP_REFRESH_STATE



[gcode_macro SP_UNLOAD_EXTRUDER]
gcode:
  {% set lane = params.LANE | default(printer.save_variables.variables.last_loaded_lane) | int %}  
  
  {% if lane >= 0 %}
    SP_CLEAR_ERROR_CODES  
    _SP_UNLOAD_EXTRUDER LANE={lane}
    SP_HOME

  {% else %}
    RESPOND TYPE=error MSG="SP: LANE parameter missing or invalid. Run again with LANE=<0...>"
  {% endif %}
  _SP_REFRESH_STATE



[gcode_macro SP_LOAD_HOTEND]
gcode:
  {% set tmp = params.TEMP %}
  SP_CLEAR_ERROR_CODES
  _SP_LOAD_HOTEND {rawparams} FORCE=1
  SP_HOME
  _SP_REFRESH_STATE



[gcode_macro SP_UNLOAD_HOTEND]
gcode:
  {% set lane = params.LANE | default(printer.save_variables.variables.last_loaded_lane) | int %}  
  
  {% if lane >= 0 %}
    SP_CLEAR_ERROR_CODES
    _SP_UNLOAD_HOTEND LANE={lane} FORCE=1

  {% else %}
    RESPOND TYPE=error MSG="SP: LANE parameter missing or invalid. Run again with LANE=<0...>"
  {% endif %}
  _SP_REFRESH_STATE



[gcode_macro SP_LOAD_LANE]
gcode:
  {% set purge = params.PURGE | default(0) | float %}
  
  {% if params.LANE %}
    
    SP_CLEAR_ERROR_CODES
    _SP_LOAD_LANE LANE={params.LANE} FORCE=1 PURGE={purge}
    

  {% else %}
    RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...>"
  {% endif %}
  _SP_REFRESH_STATE



[gcode_macro SP_UNLOAD_LANE]
gcode:
  {% set lane = params.LANE | default(printer.save_variables.variables.last_loaded_lane) | int %}
  {% set sp = printer['gcode_macro _SP_VARS'] %}  
  
  {% if lane >= 0 %}
    
    # Simulating pause retract to get more accurate tip forming samples 
    {% if sp.pause_retract != 0 and printer[printer.toolhead.extruder].can_extrude == True %}
      RESPOND MSG="SP: Simulating pause retract"
      M83
      G0 E-{sp.pause_retract|float|abs} F{60*35}   # Retract 
    {% endif %}

    SP_CLEAR_ERROR_CODES
    _SP_UNLOAD_LANE LANE={lane} FORCE=1
    SP_HOME

  {% else %}
    RESPOND TYPE=error MSG="SP: LANE parameter missing or invalid. Run again with LANE=<0...>"
  {% endif %}
  _SP_REFRESH_STATE



[gcode_macro SP_FILAMENT_CHANGE]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set unload_lane = params.UNLOAD_LANE | default(printer.save_variables.variables.last_loaded_lane) | int %}
  {% set load_lane = params.LOAD_LANE | int %}
  {% set purge = params.PURGE | default(sp.print_start_change_purge) | float %}
  
  {% if load_lane >=0 %}
    _SP_REFRESH_STATE
    _SP_FILAMENT_CHANGE UNLOAD_LANE={unload_lane} LOAD_LANE={load_lane} PURGE={purge}       
    
  {% else %}
    RESPOND TYPE=error MSG="SP: UNLOAD_LANE or LOAD_LANE parameters missing. Run again with UNLOAD_LANE=<0...> LOAD_LANE=<0...>"
  {% endif %}
  _SP_REFRESH_STATE



## The RESUME macro is never called directly internally
[gcode_macro RESUME]
rename_existing: RESUME_BASE

gcode:
    {% set sp = printer['gcode_macro _SP_VARS'] %}
    {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}

    RESPOND MSG="SP: Resuming ..."
    RESUME_BASE
    M400
    CLEAR_PAUSE

    {% if rt.runout_event == 1 %}
      SET_FILAMENT_SENSOR SENSOR=sp_sensor_runout ENABLE=1
      SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=runout_event VALUE=0
    {% endif %}
    
    {% if rt.sp_pause == 1 %}
      _SP_REFRESH_STATE 
      M400
      _SP_RESUME
    {% endif %}
    _SP_REFRESH_STATE
    



#### ------ LOADING UNLOADING HUB ----------


[gcode_macro SP_LOAD_HUB]
gcode:
  _SP_SET_EXIT_CODE CODE=1
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}

  {% if params.LANE %}
  RESPOND MSG="SP: Loading LANE {params.LANE} into the HUB ..."
  _SP_NOTIFY ACTION="hub_loading" LANE={params.LANE} COMPLETE=0
  
    {% if rt.is_filament_in != 1 %}
  
      RESPOND MSG="SP: Please wait for end message. This might take a bit after the full movement finishes..."
      _SP_LANE_SELECT LANE={params.LANE | int}
      _SP_MOTOR STOP=1 SYNC=1 DIST={sp.dist_mmu_to_hub+sp.overshoot_hub_distance+sp.dist_hub_to_sensor} SPEED={sp.speed_mmu_to_hub}
  
      RESPOND MSG="SP: LANE {params.LANE} feed has reached the HUB sensor. Parking the filament into the HUB"
      _SP_MOTOR STOP=0 DIST=-{sp.dist_hub_to_sensor}
      SP_HOME
      SP_CLEAR_ERROR_CODES
      _SP_NOTIFY ACTION="hub_loading" LANE={params.LANE} COMPLETE=1

    {% else %}
      _SP_LANE_SELECT LANE={params.LANE | int}
      _SP_MOTOR STOP=0 DIST={sp.dist_mmu_to_hub}
      _SP_SET_EXIT_CODE CODE=10
      SP_HOME
      RESPOND MSG="SP: LANE {params.LANE} loaded for specified distance"
      _SP_NOTIFY ACTION="hub_loading" LANE={params.LANE} COMPLETE=1
    {% endif %}
  
  {% else %}
    RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...>"
  {% endif %}
  _SP_REFRESH_STATE



[gcode_macro SP_UNLOAD_HUB]
gcode:
  {% set force = params.FORCE | default(0) | int %}
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  _SP_SET_EXIT_CODE CODE=1
  
  {% if params.LANE %}
    RESPOND MSG="SP: Unloading LANE {params.LANE} from the HUB ..."
    _SP_NOTIFY ACTION="hub_unloading" LANE={params.LANE} COMPLETE=0
  
    {% if rt.is_filament_in != 1 or params.LANE | int != printer.save_variables.variables.last_loaded_lane or printer.save_variables.variables.last_loaded_lane == -1 or force == 1 %}
      _SP_LANE_SELECT LANE={params.LANE | int}
      _SP_MOTOR STOP=0 DIST=-{sp.dist_mmu_to_hub} SPEED={sp.speed_mmu_to_hub}
      SP_CLEAR_ERROR_CODES
      SP_HOME
      _SP_NOTIFY ACTION="hub_unloading" LANE={params.LANE} COMPLETE=1
  
    {% else %}
        RESPOND MSG="SP: LANE {params.LANE} loaded in the extruder. Please Unload lane first"
        _SP_NOTIFY ACTION="hub_unloading" LANE={params.LANE} COMPLETE=1 ERROR=1 
    {% endif %}
  
  {% else %}
    RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...>"
  {% endif %}
  _SP_REFRESH_STATE




#### ------ LOADING UNLOADING LANES ----------


### Main point of contact for filament changes during print time
[gcode_macro _SP_FILAMENT_CHANGE]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}   
  {% set temp = params.TEMP | default(0) | int %}
  {% set force = params.FORCE | default(0) | int %}
  {% set purge = params.PURGE | default(0) | int %}

  {% if sp.debug == 1 %}
    M118 {rawparams} 
  {% endif %}

   ## detecting guest downstream in the extruder
  {% if params.UNLOAD_LANE and params.LOAD_LANE %}
     SP_CLEAR_ERROR_CODES
     _SP_NOTIFY ACTION="pending" LANE={params.LOAD_LANE} COMPLETE=0  

    {% if printer.save_variables.variables.last_loaded_lane >= 0 %}   ## Unload lane only if filament is loaded   
      M400
      _SP_REFRESH_STATE
      M400
      {% set unload_purge = sp.purge_unload if purge > 0 else 0 | float %}   ## Purging on unload only if a purge amount was sent
      _SP_UNLOAD_LANE LANE={params.UNLOAD_LANE | int} PURGE={unload_purge}   ## 1/3 of the full color flush purge to make sure we prime the meltzone for tip forming 
    {% else %}    
      RESPOND MSG="SP: Current Lane is set to {printer.save_variables.variables.last_loaded_lane}. Skipping Unload"
    {% endif %}

    M400
    _SP_REFRESH_STATE 
    M400
    _SP_LOAD_LANE LANE={params.LOAD_LANE | int} TEMP={temp} FORCE={force} PURGE={purge}
    SP_HOME

  {% else %}
    RESPOND TYPE=error MSG="SP: UNLOAD_LANE or LOAD_LANE parameters missing. Run again with UNLOAD_LANE=<0...> LOAD_LANE=<0...>"
    _SP_SET_EXIT_CODE CODE=1
  {% endif %}



[gcode_macro _SP_LOAD_LANE]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set temp = params.TEMP | default(0) | int %}
  {% set force = params.FORCE | default(0) | int %}
  {% set purge = params.PURGE | default(0) | int %}
  
  {% if rt.exit_code == 0 %}

    {% if params.LANE %}
      RESPOND MSG="SP: Loading LANE {params.LANE} ..."
      SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=loading_lane VALUE={params.LANE}
      
      M400
      _SP_REFRESH_STATE
      M400
      _SP_LOAD_EXTRUDER LANE={params.LANE | int} 

      M400 
      _SP_REFRESH_STATE
      M400
      _SP_LOAD_HOTEND TEMP={TEMP} FORCE={force} PURGE={purge}
  
    {% else %}
      RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...>"
      _SP_SET_EXIT_CODE CODE=1
    {% endif %}

 {% else %}
    RESPOND TYPE=error MSG="SP: Aborting Loading LANE {params.LANE}. A previous error code was detected" 
   _SP_SET_EXIT_CODE CODE=1
 {% endif %}



[gcode_macro _SP_UNLOAD_LANE]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set temp = params.TEMP | default(0) | int %}
  {% set force = params.FORCE | default(0) | int %}
  {% set purge = params.PURGE | default(0) | int %}
 
  {% if rt.exit_code == 0 %}

    {% if params.LANE %}
      RESPOND MSG="SP: Unloading LANE {params.LANE} ..."
      SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=unloading_lane VALUE={params.LANE}
      
      M400
      _SP_REFRESH_STATE
      M400
      _SP_UNLOAD_HOTEND TEMP={temp} FORCE={force} PURGE={purge}

      M400
      _SP_REFRESH_STATE
      M400
      _SP_UNLOAD_EXTRUDER LANE={params.LANE | int}
  
     {% else %}
        RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...>"
        _SP_SET_EXIT_CODE CODE=1
     {% endif %}

 {% else %}
   RESPOND TYPE=error MSG="SP: Aborting Unloading LANE {params.LANE}. A previous error code was detected" 
   _SP_SET_EXIT_CODE CODE=1
 {% endif %}




#### ------ LOADING UNLOADING EXTRUDER ----------


### the macro below is broken into A B C parts to obtain refreshed variables from the sensor
[gcode_macro _SP_LOAD_EXTRUDER]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set guest_lane = 1 if sp.has_guest_lane == 1 and params.LANE|int == sp.lanes-1 else 0 %}
  
  {% if rt.exit_code == 0 %}
    RESPOND MSG="SP: Loading Extruder ..."

    {% if params.LANE %}
    _SP_NOTIFY ACTION="extruder_loading" LANE={params.LANE} COMPLETE=0 
    
      {% if rt.is_filament_in != 1 %} 

        {% if guest_lane == 1 %} ## Manual loading of the guest lane
          SP_HOME
          _SP_UI_MSG MSG="Loading Guest Lane.  Please insert the filament into the Guest lane up to the extruder gears.  After the filament is detected the extruder will start loading."
          M400
          _SP_REFRESH_STATE
          M400
          _SP_CHECK_LOOP PAUSE={sp.guest_operation_timeout} COMMAND="'_SP_LOAD_EXTRUDER_C LANE={params.LANE}'" CONDITION=1    
          
        {% else %}  ## Normal extruder loading - Move until filament sensor is triggered - homing move 
          _SP_LANE_SELECT LANE={params.LANE | int}
          _SP_MOTOR STOP=2 SPEED={sp.speed_hub_to_extruder} DIST={sp.dist_hub_to_sensor*sp.overshoot_factor}

          {% if sp.sensor_safe_move > 0 %}
            M400
            _SP_MOTOR STOP=0 SPEED={sp.speed_hub_to_extruder} DIST={sp.sensor_safe_move} ## safety move to ensure the endstop stays triggered
          {% endif %}

          M400
          _SP_REFRESH_STATE
          M400
          _SP_LOAD_EXTRUDER_B LANE={params.LANE}
        {% endif %}

      {% else %}
        _SP_SET_EXIT_CODE CODE=1
        SP_HOME
        RESPOND TYPE=error MSG="SP: Sensor detecting filament in. Please clear the HUB first"
        _SP_NOTIFY ACTION="extruder_loading" LANE={params.LANE} COMPLETE=1 ERROR=1 
      {% endif %}
      
    {% else %}
      _SP_SET_EXIT_CODE CODE=1
      RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...>"
    {% endif %}

 {% else %}
   _SP_SET_EXIT_CODE CODE=1  ### Bypass and carry error 
 {% endif %}
 


[gcode_macro _SP_LOAD_EXTRUDER_B]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}

  {% if rt.is_filament_in == 1 %}

      RESPOND MSG="SP: First HUB stage loaded. Continuing with the Extruder stage..."
      M400
      _SP_REFRESH_STATE
      M400
      _SP_LOAD_EXTRUDER_C LANE={params.LANE}

  {% else %}
    RESPOND MSG="SP: Sensor not reached. Retrying..."
    _SP_NOTIFY ACTION="extruder_loading" LANE={params.LANE} COMPLETE=0 ERROR=1

    {% set retry_speed = sp.speed_hub_to_extruder * 0.75 %}
    _SP_MOTOR STOP=0 SPEED={retry_speed} DIST=-5 ## moving back a bit in case of jamming 
    _SP_MOTOR STOP=2 SPEED={retry_speed} DIST={sp.dist_hub_to_sensor*sp.overshoot_factor+5}   ## retrying 

    {% if sp.sensor_safe_move > 0 %}
      _SP_MOTOR STOP=0 SPEED={retry_speed} DIST={sp.sensor_safe_move}   ## safety move to ensure the endstop stays triggered
    {% endif %}

    M400
    _SP_REFRESH_STATE
    M400
    _SP_LOAD_EXTRUDER_C LANE={params.LANE}
  {% endif %}

 

[gcode_macro _SP_LOAD_EXTRUDER_C]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set guest_lane = 1 if sp.has_guest_lane == 1 and params.LANE|int == sp.lanes-1 else 0 %}
 
  M400    
  {% if rt.is_filament_in == 1 %}

    {% if guest_lane == 1 %}  # Loading the Guest lane
    
      M400
      G4 P300 # Small pause in case the filament just passed the sensor 
      {% set sync_dist = sp.dist_filament_park*1.1 %}  ## extra 10% filament_park distance buffer due to loading move losses    
      FORCE_MOVE STEPPER=extruder VELOCITY={sp.speed_sync_moves} ACCEL={sp.motor_accel} DISTANCE={sync_dist}

    {% else %}  ## Normal lane

      _SP_LANE_SELECT LANE={params.LANE}

      # Approach from sensor to extruder - minus the safety move done in the previous stage 
      _SP_MOTOR STOP=0 DIST={sp.dist_sensor_to_synced_move - sp.sensor_safe_move} SPEED={sp.speed_hub_to_extruder} 

      # Sync move for loading the extruder gears and parking filament post extruder    
      {% set sync_speed = sp.speed_sync_moves if rt.runout_event == 0 else sp.speed_meltzone_loading * 0.75 %} ## lowering speed for runout event due to filament inside the hotend

      M400
      {% set sync_dist = (sp.dist_sensor_to_extruder - sp.dist_sensor_to_synced_move) + (sp.dist_filament_park*1.1) %}  ## extra 10% filament_park distance buffer due to synced move losses   
      _SP_MOTOR STOP=0 SYNC=0 SPEED={sync_speed} ACCEL={sp.motor_accel} DIST={sync_dist}
      FORCE_MOVE STEPPER=extruder VELOCITY={sync_speed} ACCEL={sp.motor_accel} DISTANCE={sync_dist}
    {% endif %}

    {% if sp.debug == 1 %}
      RESPOND MSG="DEBUG: E LOAD SYNC - Dist: {sync_dist} mm"
    {% endif %}

    SP_HOME               
    _SP_SET_LOADED_LANE LANE={params.LANE}    ### LANE loaded and saved
    RESPOND MSG="SP: LANE {params.LANE} loaded into the Extruder"
    _SP_NOTIFY ACTION="extruder_loading" LANE={params.LANE} COMPLETE=1
       
  {% else %}
      _SP_SET_EXIT_CODE CODE=1
      _SP_MOTOR STOP=0 DIST=-2 # Safety Retract
      SP_HOME
      RESPOND TYPE=error MSG="SP: Filament hasn't reached the sensor. Please check the printer and try again"
      _SP_NOTIFY ACTION="extruder_loading" LANE={params.LANE} COMPLETE=1 ERROR=1
  {% endif %}



### the macro below is broken into A B C parts to obtain refreshed variables from the sensor for status check
[gcode_macro _SP_UNLOAD_EXTRUDER]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set guest_lane = 1 if sp.has_guest_lane == 1 and params.LANE|int == sp.lanes-1 else 0 %}


  {% if rt.exit_code == 0 %}
    RESPOND MSG="SP: Unloading Extruder ..."
  
    {% if params.LANE %}
    _SP_NOTIFY ACTION="extruder_unloading" LANE={params.LANE} COMPLETE=0

      {% if rt.is_filament_in == 1 %} 

        {% if guest_lane == 1 %}

          M400
          SP_HOME  ## Just making sure the MMU is not engaged

          {% set sync_dist = sp.dist_filament_park*1.1 + sp.dist_sensor_to_extruder - sp.dist_sensor_to_synced_move %}   ## extra 10% filament_park distance buffer due to synced move losses   
          FORCE_MOVE STEPPER=extruder VELOCITY={sp.speed_sync_moves} ACCEL={sp.motor_accel} DISTANCE=-{sync_dist} 

          M400
          _SP_UI_MSG MSG="Guest Lane Unloaded!  Please remove the filament from the extruder.  Once the filament has cleared the sensor the process will continue."
          _SP_REFRESH_STATE
          M400
          _SP_CHECK_LOOP PAUSE={sp.guest_operation_timeout} COMMAND="'_SP_UNLOAD_EXTRUDER_C LANE={params.LANE}'"  CONDITION=0   

        {% else %}
          # Start Synced moves
          M400 
          _SP_LANE_SELECT LANE={params.LANE | int}

          M400
          {% set sync_dist = sp.dist_filament_park*1.1 + sp.dist_sensor_to_extruder - sp.dist_sensor_to_synced_move %}   ## extra 10% filament_park distance buffer due to synced move losses   
          _SP_MOTOR STOP=0 SYNC=0 SPEED={sp.speed_sync_moves} ACCEL={sp.motor_accel} DIST=-{sync_dist+sp.backlash}   ## compensating for backlash due to compressed filament in the bowden
          FORCE_MOVE STEPPER=extruder VELOCITY={sp.speed_sync_moves} ACCEL={sp.motor_accel} DISTANCE=-{sync_dist} 
          G4 P40
          # Outside the extruder towards the sensor - homing move
          M400
          _SP_MOTOR STOP=-2 SPEED={sp.speed_hub_to_extruder} ACCEL={sp.motor_accel} DIST=-{sp.dist_sensor_to_synced_move*sp.overshoot_factor} # Stop when clearing the sensor
          G4 P40


          M400
          {% if sp.sensor_safe_move > 0 %}
            _SP_MOTOR STOP=0 SPEED={sp.speed_hub_to_extruder} DIST=-{sp.sensor_safe_move} ## safety move to ensure the endstop stays untriggered
          {% endif %}

          M400
          _SP_REFRESH_STATE
          M400
          _SP_UNLOAD_EXTRUDER_B LANE={params.LANE}
        {% endif %}

        {% if sp.debug == 1 %}
          RESPOND MSG="DEBUG: E UNLOAD SYNC - Dist: -{sync_dist} mm"
        {% endif %}            
        
      {% else %}
          RESPOND MSG="SP: Filament is not detected inside the extruder. Unloading not needed"
          _SP_SET_LOADED_LANE LANE=-1
          SP_HOME
          _SP_NOTIFY ACTION="extruder_unloading" LANE={params.LANE} COMPLETE=1 
      {% endif %}
      
    {% else %}
      _SP_SET_EXIT_CODE CODE=1
      RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...>"
    {% endif %}

 {% else %}
   _SP_SET_EXIT_CODE CODE=1  ### Bypass and carry error 
 {% endif %}



[gcode_macro _SP_UNLOAD_EXTRUDER_B]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}

  {% if rt.is_filament_in != 1 %}   ## Unloading cleared the sensor
      RESPOND MSG="SP: Sensor cleared."
      M400
      _SP_REFRESH_STATE
      M400
      _SP_UNLOAD_EXTRUDER_C LANE={params.LANE}

  {% else %}
    RESPOND MSG="SP: Sensor not cleared. Retrying..."
    _SP_NOTIFY ACTION="extruder_unloading" LANE={params.LANE} COMPLETE=0 ERROR=1

    {% set retry_speed = sp.speed_hub_to_extruder * 0.8 %}
    _SP_MOTOR STOP=0 SPEED={retry_speed} DIST=5   ## moving back a bit in case of jamming 
    M400
    G4 P40
    _SP_MOTOR STOP=-2 SPEED={retry_speed} DIST=-{sp.dist_sensor_to_synced_move*sp.overshoot_factor+5}  ## retrying 
    G4 P40

    {% if sp.sensor_safe_move > 0 %}
      _SP_MOTOR STOP=0 SPEED={retry_speed} DIST=-{sp.sensor_safe_move}  ## safety move to ensure the endstop stays untriggered
    {% endif %}

    M400
    _SP_REFRESH_STATE
    M400
    _SP_UNLOAD_EXTRUDER_C LANE={params.LANE}
  {% endif %}



[gcode_macro _SP_UNLOAD_EXTRUDER_C]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set guest_lane = 1 if sp.has_guest_lane == 1 and params.LANE|int == sp.lanes-1 else 0 %}

  M400
  {% if rt.is_filament_in != 1 %}  ## Filament cleared the sensor

    {% if guest_lane == 0 %}  ## Normal Lane
      # Parking filament into the HUB
      _SP_MOTOR STOP=0 SPEED={sp.speed_hub_to_extruder} DIST=-{sp.dist_hub_to_sensor-sp.sensor_safe_move}
    {% endif %}

    RESPOND MSG="SP: Extruder unloaded"
    _SP_NOTIFY ACTION="extruder_unloading" LANE={params.LANE} COMPLETE=1

    _SP_SET_LOADED_LANE LANE=-1    ## LANE unloaded and saved

  {% else %}
    RESPOND TYPE=error MSG="SP: Sensor has not been cleared after retrying to unload. Please check the printer and try again"
    _SP_NOTIFY ACTION="extruder_unloading" LANE={params.LANE} COMPLETE=1 ERROR=1
    _SP_SET_EXIT_CODE CODE=1
    SP_HOME 
  {% endif %}



#### ------ LOADING UNLOADING HOTEND ----------


[gcode_macro _SP_LOAD_HOTEND]
gcode: 
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set force = params.FORCE | default(0) | int %}
  {% set hotend_loaded = printer.save_variables.variables.hotend_loaded | default(-1) | int %}
  {% set purge = params.PURGE|default(0) | int %}
  {% set request_temp = params.TEMP | default(0) | int %}
  
  {% if rt.exit_code == 0 %} 
    RESPOND MSG="SP: Loading Hotend ..."
 
    {% if rt.is_filament_in == 1 %}   
      {% if hotend_loaded < 1 or force == 1 %}   

        ### Preventive error check for saved variable status
        {% if hotend_loaded == -1 %}
          RESPOND MSG="SP: Hotend load state = {hotend_loaded}"
          RESPOND MSG="SP: Could not read the previous hotend load state saved on disk. Assuming empty and continuing..."
          RESPOND MSG="SP: If this issue persists, there might be an issue with your SAVE_VARIABLES configuration"
        {% endif %}

        _SP_NOTIFY ACTION="hotend_loading" LANE={rt.loading_lane} COMPLETE=0
      
        {% if rt.curr_lane_temp > request_temp %} 
          {% set extruder_temp = rt.curr_lane_temp | int %} 
          RESPOND MSG="SP: The previous lane used a higer temp ({rt.curr_lane_temp}C)"
        {% else %}
          {% set extruder_temp = request_temp | int %} 
        {% endif %}
    
        SP_HOME
        _SP_HEAT_HOTEND TEMP={extruder_temp}
        
        {% set dist = sp.dist_extruder_to_meltzone - sp.dist_filament_park - sp.tip_length_below_cut %}
        {% if sp.end_of_load_filament_move < 0 %}  ## if a negative end of load move is set, we subtract the distance
          {% set dist = dist - sp.end_of_load_filament_move|abs %}
        {% endif %}
        
        M83
        G0 E{dist*0.5} F{60*sp.speed_meltzone_loading*2}   ## approach hotzone - A - fast stage
        G0 E{dist*0.25} F{60*sp.speed_meltzone_loading}   ## approach hotzone - B - normal stage
        G0 E{dist*0.25} F{60*sp.speed_meltzone_loading*0.5}   ## approach hotzone - C - slow stage
      
        {% if sp.end_of_load_filament_move > 0 %}
          G0 E{sp.end_of_load_filament_move} F{60*sp.speed_meltzone_loading*0.5}    ## push extra distance at load
        {% endif %}

        {% if purge > 0 %}    ## Purge 
          G1 E{purge} F{60*(sp.purge_speed/2.4)}  ## conversion from mm3/s to mm/s 
          RESPOND MSG="SP: Purging {purge}mm of filament"
        {% endif %}

        rt.curr_lane_temp = request_temp
        RESPOND MSG="SP: Saving the current lane temp ({request_temp}C)"
        
        M400
        SAVE_VARIABLE VARIABLE=hotend_loaded VALUE=1
        SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=counter_changes VALUE={rt.counter_changes+1}
        RESPOND MSG="SP: Hotend loaded"
        _SP_NOTIFY ACTION="hotend_loading" LANE={rt.loading_lane} COMPLETE=1
        _SP_RESTORE_PA
  
      {% else %}
        SAVE_VARIABLE VARIABLE=hotend_loaded VALUE=1
        RESPOND MSG="SP: Filament already loaded in the hotend. Continuing"
        _SP_NOTIFY ACTION="hotend_loading" LANE={rt.loading_lane} COMPLETE=1
        _SP_RESTORE_PA
      {% endif %}

    {% else %}
      _SP_SET_EXIT_CODE CODE=1
      _SP_SET_LOADED_LANE LANE=-1
      SAVE_VARIABLE VARIABLE=hotend_loaded VALUE=0
      RESPOND TYPE=error MSG="SP: Filament is not detected inside the extruder."
      _SP_NOTIFY ACTION="hotend_loading" LANE={rt.loading_lane} COMPLETE=1 ERROR=1
      SP_HOME
    {% endif %}
    
 {% else %}
   _SP_SET_EXIT_CODE CODE=1  ### Bypass and carry error
 {% endif %}



[gcode_macro _SP_UNLOAD_HOTEND]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set force = params.FORCE | default(0) | int %}
  {% set purge = params.PURGE|default(0) | int %}
  {% set hotend_loaded = printer.save_variables.variables.hotend_loaded | default(-1) | int %}
  
  {% if rt.exit_code == 0 %}
    RESPOND MSG="SP: Unloading Hotend ..." 
    
    {% if hotend_loaded > 0 or force == 1 %}    
      _SP_NOTIFY ACTION="hotend_unloading" LANE={rt.unloading_lane} COMPLETE=0
      
      {% set extruder_temp = params.TEMP | default(0) | int %}
     
      {% if rt.is_filament_in == 1 or sp.enabled == 0 %}
        _SP_HEAT_HOTEND TEMP={params.TEMP}
        SP_HOME

        _SP_DISABLE_PA
        _SP_DISABLE_MPC
        
        {% if purge > 0 %}    ## Purge 
          G1 E{purge} F{60*(sp.purge_speed/2.4)}
          G4 P2000    ## Wait 2 seconds to release pressure
          G0 E-{sp.pause_retract} F{35*60}   ## Simulate Pause retract
        {% endif %}
        
        M400
        _SP_TIP_FORM    ## Forming Tip, takes care of the park distance 
        M400
                
        SAVE_VARIABLE VARIABLE=hotend_loaded VALUE=0 
        SP_CLEAR_ERROR_CODES
        RESPOND MSG="SP: Hotend unloaded"
        _SP_NOTIFY ACTION="hotend_unloading" LANE={rt.unloading_lane} COMPLETE=1

      {% else %}
        SAVE_VARIABLE VARIABLE=hotend_loaded VALUE=0  
        RESPOND MSG="SP: Filament already unloaded. Continuing"
        _SP_NOTIFY ACTION="hotend_unloading" LANE={rt.unloading_lane} COMPLETE=1
      {% endif %}
      
    {% else %}
        SP_HOME
        RESPOND MSG="SP: Hotend load state = {hotend_loaded}"
        {% if hotend_loaded == 0 %}  
          RESPOND MSG="SP: The hotend was previously marked as empty. Skipping unloading ..."
        {% else %}
          RESPOND MSG="SP: Could not read the previous hotend load state saved on disk. Assuming empty and continuing..."
          RESPOND MSG="SP: If this issue persists, there might be an issue with your SAVE_VARIABLES configuration"
        {% endif %}

        _SP_NOTIFY ACTION="hotend_unloading" LANE={rt.unloading_lane} COMPLETE=1
    {% endif %}

 {% else %}
   _SP_SET_EXIT_CODE CODE=1  ### Bypass and carry error 
 {% endif %}



### Setting purge amount called by the slicer though _SP_SET_PURGE PURGE=[first_flush_volume]  - value needs to be doubled
[gcode_macro _SP_SET_PURGE]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set purge = params.PURGE|float * 2 if params.PURGE|float > 0 else sp.print_start_change_purge | float %} ## mm
 
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=next_purge VALUE={purge}

  {% if sp.debug == 1 %}
    RESPOND MSG="DEBUG: _SP_SET_PURGE - Next Lane purge amount set to: {purge}mm"
  {% endif %}



#### ------ PAUSE RESUME ----------


# Refactored from Mainsail

[gcode_macro _SP_PAUSE]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  
  {% set lane = params.LANE | default(-1) | int %}
  {% set runout = params.RUNOUT | default (0) | int %}
  {% set unload_lane = printer.save_variables.variables.last_loaded_lane | default(-1) | int %}
  {% set lanes_validated = 0 %}

  # Check extruder status
  {% set has_extruder = printer.toolhead.extruder != '' %}
  {% set can_extrude = True if printer.toolhead.extruder == ''           
                  else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder

  # Save current settings
  {% set restore = params.RESTORE | default(1) | int %}
  {% set temp = printer[printer.toolhead.extruder].target if has_extruder else 0 %}
  {% set fan_speed = printer['fan'].speed if printer['fan'] is defined else -1 %}
  {% set aux_speed = printer['fan_generic aux'].speed if printer['fan_generic aux'] is defined else -1 %}  
  {% set velocity = printer['toolhead'].max_velocity %}  
  {% set accel = printer['toolhead'].max_accel %}  
  
  SET_GCODE_VARIABLE MACRO=_SP_RESUME VARIABLE=saved VALUE="{{'restore': restore, 'temp': temp, 'fan_speed': fan_speed, 'aux_speed': aux_speed, 'velocity': velocity, 'accel': accel}}"
  SAVE_GCODE_STATE NAME=_SP_FILAMENT_CHANGE

  ### Pausing
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=sp_pause VALUE=1

  ### Saving positions
  M400
  {% set sx = printer.toolhead.position.x %}
  {% set sy = printer.toolhead.position.y %}
  {% set sz = printer.gcode_move.gcode_position.z %}
  {% set toolhead_z = printer.toolhead.position.z %}
  {% set z_diff = (sz-toolhead_z)| abs %}

  SET_GCODE_VARIABLE MACRO=_SP_RESUME VARIABLE=pos VALUE="{{'saved_x': sx, 'saved_y': sy, 'saved_z': sz}}"
  _SP_RESET_GCODE_MOTION

  {% if z_diff > 0.8 %}
    RESPOND TYPE=error MSG="SP: WARNING - gcode vs toolhead Z saved position greater than the warning threshold! ({z_diff} > 0.8)"
    RESPOND TYPE=error MSG="SP: This safety trigger might be caused by large bed mesh variations. PAUSING"
    PAUSE
  {% endif %}

  # Disable PA
  _SP_DISABLE_PA
  SET_VELOCITY_LIMIT VELOCITY={sp.park_speed} ACCEL={sp.park_accel} 

  # Pause retract
  {% if sp.pause_retract != 0 and can_extrude == True %}
    M83
    G0 E-{sp.pause_retract|float|abs} F{60*35}   # Retract 
  {% endif %}

  # Sidestep
  M400
  {% if sp.use_park == 0 and sp.sidestep_amount > 0 and runout == 0 %}
    {% if printer.gcode_move.gcode_position.x > rt.sidestep_ref - 5 %}

      ## Updating the reference position if greater
      {% if printer.gcode_move.gcode_position.x > rt.sidestep_ref %}
        SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=sidestep_ref VALUE={printer.gcode_move.gcode_position.x}
      {% endif %}

      RESPOND MSG="SP: Sidestep Right"
      {% set x_pos = [printer.gcode_move.gcode_position.x + sp.sidestep_amount, printer.toolhead.axis_maximum.x] | min %}
      G0 X{x_pos} F{sp.park_speed*60}

    {% else %}
      RESPOND MSG="SP: Sidestep Left"
      {% set x_pos = [printer.gcode_move.gcode_position.x - sp.sidestep_amount, printer.toolhead.axis_minimum.x] | max %}
      G0 X{x_pos} F{sp.park_speed*60}
    {% endif %}
  {% endif %}

  # Pause fans
  {% if fan_speed >= 0 and sp.pause_fan_speed | float >= 0.0 %}  ## if fan was found and pause fan speed is defined
    _SP_FANS SPEED={sp.pause_fan_speed | float}
  {% endif %}

  # Pause park
  M400
  {% if sp.use_park == 1 or runout == 1 %}
    _SP_PAUSE_PARK
  {% endif %} 

  # Validate lane change
  {% if lane+1 <= sp.lanes and lane >= 0 %}  # is the next lane valid
      {% if unload_lane+1 <= sp.lanes %}     # is the current lane valid
        RESPOND MSG="SP: ----- Filament Change: LANE {unload_lane} >>>> LANE {lane} ----- "
        RESPOND MSG=""
        {% set lanes_validated = 1 %}
      
      {% else %}
        RESPOND TYPE=error MSG="SP: Unknown current loaded LANE {unload_lane}. Use SP_FORCE_SET_LOADED_LANE LANE=<0...>, SP_CLEAR_ERROR_CODES, SP_UNLOAD_LANE, SP_LOAD_LANE and finally RESUME to manually change the filament. "
      {% endif %}

  {% else %}
    RESPOND TYPE=error MSG="SP: Invalid change to LANE {lane}"
  {% endif %}

 
  # Main filament change routine
  {% if lanes_validated == 1 %}
    SET_FILAMENT_SENSOR SENSOR=sp_sensor_runout ENABLE=0

    M400
    {% if rt.user_macros_executed == 0 %} # if user macro can be executed
      RESPOND MSG="SP: Running User BEFORE_CHANGE Macro"
      SAVE_GCODE_STATE NAME=user_macro
      _SP_BEFORE_CHANGE
      SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=user_macros_executed VALUE=1
      RESTORE_GCODE_STATE NAME=user_macro
    {% endif %}
   
    # Perform filament change
    SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=unloading_lane VALUE={unload_lane}
    SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=loading_lane VALUE={lane}


    {% if runout == 0 %}
      {% set purge = rt.next_purge if (sp.park_purge == 1 and sp.use_park == 1) else 0 | float %}  ## setting purge amount if park and park purge are active
      _SP_FILAMENT_CHANGE UNLOAD_LANE={unload_lane} LOAD_LANE={lane} PURGE={purge}  # Main change macro
    
    {% else %}
     _SP_RUNOUT LANE={lane}
    {% endif %}

    M400
    _SP_RESUME  # Done, running internal resume  
    
  {% else %}
    RESPOND TYPE=error MSG="SP: Print PAUSED and filament change interrupted due to previous errors. Please fix the issues before resuming"
    RESPOND TYPE=error MSG="SP: PAUSED. Unloading LANE {printer.save_variables.variables.last_loaded_lane} >>>> Pending LANE {lane}"
    
    SP_CLEAR_ERROR_CODES  
    M400
    PAUSE
  {% endif %}



[gcode_macro _SP_RESUME]
variable_saved: {'restore': 0, 'temp': 0, 'fan_speed': -1, 'aux_speed': -1, 'velocity': 200, 'accel': 5000 }
variable_pos: {'saved_x': -1.0, 'saved_y': -1.0, 'saved_z': -1.0 }
gcode:

  ##### Get user parameters or use default #####
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  
  {% set can_extrude = True if printer.toolhead.extruder == ''           
                  else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
                
  {% set change_validated = 0 %}

  {% if rt.exit_code == 0 %}

      # Restore Saved Settings
      {% if saved.restore and rt.sp_pause == 1 %}
          RESPOND MSG="SP: Restoring previous settings"

          # Restore temp
          {% if saved.temp != printer['extruder'].target %}
            RESPOND TYPE=echo MSG="SP: Temperature target : {saved.temp}"
            M104 S{saved.temp}
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={saved.temp-3} MAXIMUM={saved.temp+3}
          {% endif %}

          # Restore speeds
          SET_VELOCITY_LIMIT VELOCITY={saved.velocity} ACCEL={saved.accel} 
          
          # Restore fans
          
          {% if saved.fan_speed >= 0 %}
            M106 S{saved.fan_speed*255}
          {% endif %}

          {% if saved.aux_speed >= 0 %}
            SET_FAN_SPEED FAN=aux SPEED={saved.aux_speed}
          {% endif %}

          # Setting change_validated for sp_pause
          {% set change_validated = 1 %}
          
      {% elif can_extrude %}
        {% set change_validated = 1 %}        
        SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=counter_pauses VALUE={rt.counter_pauses+1} # Counting manual pauses
        
      {% else %} 
        RESPOND TYPE=error MSG="SP: RESUME interrupted. The hotend is not hot enough, please heat up again and then RESUME print"
      {% endif %}

  {% endif %}


  # Main resume routine
  {% if change_validated != 1 %}
    RESPOND TYPE=error MSG="SP: Cannot RESUME print due to previous errors. Please fix the issues before resuming"
    RESPOND TYPE=error MSG="SP: PAUSED. Unloading LANE {rt.unloading_lane} >>>> Pending LANE {rt.loading_lane}"
    SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=counter_errors VALUE={rt.counter_errors+1}
    _SP_NOTIFY ACTION="pause" LANE={rt.loading_lane} ERROR=1
    SP_HOME
    M400
    PAUSE
    SP_CLEAR_ERROR_CODES
    
  {% else %}    
    # Check if the user macro was previously executed
    M400
    {% if rt.user_macros_executed == 1 %}
      RESPOND MSG="SP: Running User AFTER_CHANGE Macro"
      SAVE_GCODE_STATE NAME=user_macro
      _SP_AFTER_CHANGE
      SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=user_macros_executed VALUE=0
      RESTORE_GCODE_STATE NAME=user_macro
    {% endif %}   
 
    
    # Messaging done
    RESPOND MSG="SP: ----- Filament Change DONE: LANE {rt.unloading_lane} >>>> LANE {printer.save_variables.variables.last_loaded_lane} ----- "
    RESPOND MSG=""
    SET_FILAMENT_SENSOR SENSOR=sp_sensor_runout ENABLE=1
   
    # Restoring Z position
    _SP_RESET_GCODE_MOTION

    {% if pos.saved_z | float > 0 %}
      G1 X{pos.saved_x} Y{pos.saved_y} F{60*sp.park_speed*0.5}
      G1 Z{pos.saved_z}
      SET_GCODE_VARIABLE MACRO=_SP_RESUME VARIABLE=pos VALUE="{{'saved_x': -1.0, 'saved_y': -1.0, 'saved_z': -1.0 }}"
    {% else %}
      RESPOND TYPE=error MSG="SP: Cannot restore Z position. Saved Z value lower than 0"
      M400
      PAUSE    
    {% endif %}

    SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=sp_pause VALUE=0    
    RESTORE_GCODE_STATE NAME=_SP_FILAMENT_CHANGE
 {% endif %}



[gcode_macro _SP_PAUSE_PARK]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set park_x  = sp.park_x %}
  {% set park_y  = sp.park_y %}
  {% set park_dz = sp.park_dz|abs %}
  {% set velocity = sp.park_speed %}
  {% set velocity_z = sp.park_z_speed %}
  {% set accel = sp.park_accel %}

  ##### get config and toolhead values #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
                
  ##### define park position #####
  {% set z_min = params.Z_MIN|default(0)|float %}
  {% set park_z = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
 
             
  ##### moves #####

  {% if "xyz" in printer.toolhead.homed_axes %}
    SET_VELOCITY_LIMIT VELOCITY={velocity} ACCEL={accel} 
    G90
    G1 Z{park_z} F{60*velocity_z}
    G1 X{park_x} Y{park_y} F{60*velocity}
    _SP_RESET_GCODE_MOTION
  {% else %}
    RESPOND TYPE=error MSG='PARK: Printer not homed'
  {% endif %}

  


#### ------ LOW LEVEL CORE FUNCTIONS ----------

[gcode_macro _SP_SET_LOADED_LANE]
gcode:
  {% set lane = params.LANE | default (-1) | int %}
  SAVE_VARIABLE VARIABLE=last_loaded_lane VALUE={lane}
  
  {% if lane == -1 %}
    SAVE_VARIABLE VARIABLE=hotend_loaded VALUE=0
    _SP_NOTIFY ACTION="empty"
  {% else %}
    _SP_NOTIFY ACTION="loaded" LANE={lane}
  {% endif %}



[gcode_macro _SP_HEAT_HOTEND]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  
  {% set extruder_temp = params.TEMP | default(0) | int %}
  {% if extruder_temp == 0 %}
    {% if printer['extruder'].target < 180 %}  ## assuming no one prints this low
      {% set extruder_temp = sp.min_loading_temp | int %}
      RESPOND MSG="SP: Low target temperature detected. Heating up hotend to {sp.min_loading_temp}C"
      M104 S{extruder_temp}
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp-3} MAXIMUM={extruder_temp+3}
    {% endif %}
  {% else %}
    RESPOND MSG="SP: Heating up hotend to {extruder_temp}C"
    M104 S{extruder_temp}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp-3} MAXIMUM={extruder_temp+3}
  {% endif %}  



[gcode_macro _SP_FANS]
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}  ## Stinger aux fan reference
  {% set speed = params.SPEED | default (0.0) | float %}
  
  {% if speed != 0 %}
    M106 S{speed*255}
  {% else %}
    M106 S0
  {% endif %}
  
  {% if client.has_aux_fan %}          # force aux fan off
    {% if client.has_aux_fan == True %}
      SET_FAN_SPEED FAN=aux SPEED=0
    {% endif %}
  {% endif %}



[gcode_macro _SP_DISABLE_PA]
gcode:
    {% set sp = printer['gcode_macro _SP_VARS'] %}
    
    {% if printer.extruder.pressure_advance > 0 and sp.turn_pa_off == 1 %}
      RESPOND MSG="SP: Disabling PA"
      SET_GCODE_VARIABLE MACRO=_SP_RESTORE_PA VARIABLE=pa VALUE={printer.extruder.pressure_advance | float}
      SET_PRESSURE_ADVANCE ADVANCE=0
    {% endif %}



[gcode_macro _SP_RESTORE_PA]
variable_pa: -1.0
gcode:
  {% set force = params.FORCE | default (0) | int %}
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set printing = 1 if (not printer['pause_resume'].is_paused and printer['print_stats'].state == "printing") else 0 | int %}

  {% if (pa > 0 and sp.turn_pa_off == 1 and printer.extruder.pressure_advance == 0 and printing != 1) or (pa > 0 and force == 1) %}
    RESPOND MSG="SP: Restoring PA"
    SET_PRESSURE_ADVANCE ADVANCE={pa}
  {% endif %}



[gcode_macro _SP_DISABLE_MPC]
gcode:
    {% set sp = printer['gcode_macro _SP_VARS'] %}
    
    {% if sp.turn_mpc_off == 1 %}
      RESPOND MSG="SP: Disabling MPC feed forward"
      MPC_SET HEATER=extruder FILAMENT_DENSITY=1.24 FILAMENT_HEAT_CAPACITY=0  # disabling feed forward heating boost - slicer resets MPC filament parameters on resume
    {% endif %}



[gcode_macro _SP_SET_ANGLE_OFFSET]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  SET_GCODE_VARIABLE MACRO=_SP_VARS VARIABLE=angle_offset VALUE={params.VALUE|float}
  _SP_SERVO ANGLE={rt.commanded_angle}
  _SP_REFRESH_STATE



[gcode_macro _SP_SHOW_STATISTICS]
gcode:
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}

  RESPOND MSG="_____"
  RESPOND MSG="   Errors           : {rt.counter_errors}"
  RESPOND MSG="   Manual Pauses    : {rt.counter_pauses}"
  RESPOND MSG="   Filament Changes : {rt.counter_changes}"
  RESPOND MSG="_____   SP Statistics  _____" 
  RESPOND MSG=""
  


[gcode_macro SP_HOME]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}

  {% if sp.enabled %}
    {% if rt.commanded_angle != sp.angle_home %}  # Cheking to see if you are already homed
      M400
      SET_SERVO SERVO=sp_servo ANGLE={sp.angle_home}
      G4 P{1000*sp.switch_time}
      M400
    
      SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=commanded_angle VALUE={sp.angle_home}
      SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=selected_servo_lane VALUE=-1
    {% endif %}
    _SP_OFF
  {% endif %}
  _SP_REFRESH_STATE



[gcode_macro _SP_DEBUG]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  SET_GCODE_VARIABLE MACRO=_SP_VARS VARIABLE=debug VALUE={not sp.debug}
  RESPOND MSG="SP: Debug mode set to: {not sp.debug}"



[gcode_macro _SP_OFF]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}

  MANUAL_STEPPER STEPPER=sp_motor ENABLE=0
  SET_SERVO servo=sp_servo WIDTH=0

  {% if sp.debug == 1 %}
    RESPOND MSG="SP: Servo and Motor OFF"
  {% endif %}
  


[gcode_macro _SP_RESET_GCODE_MOTION]
gcode:
    G90
    M83
    G92 E0
    M400



[gcode_macro _SP_RESET_VARIABLES]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}

  SET_GCODE_VARIABLE MACRO=_SP_RESUME VARIABLE=pos VALUE="{{'saved_x': -1.0, 'saved_y': -1.0, 'saved_z': -1.0 }}"
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=user_macros_executed VALUE=0
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=sp_pause VALUE=0
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=active VALUE=1
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=next_purge VALUE=60
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=counter_pauses VALUE=0
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=counter_changes VALUE=0
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=counter_errors VALUE=0
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=next_purge VALUE={sp.print_start_change_purge}  ## setting default park purge to user start purge
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=runout_event VALUE=0
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=sidestep_ref VALUE=0
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=print_start_change VALUE=0



[gcode_macro _SP_REFRESH_STATE]
gcode:
  M400
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=is_filament_in VALUE={1 if printer['filament_switch_sensor sp_sensor_runout'].filament_detected == True else 0}



[gcode_macro _SP_SET_EXIT_CODE]
gcode:
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=exit_code VALUE={params.CODE|int}



[gcode_macro SP_CLEAR_ERROR_CODES]
gcode:
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=exit_code VALUE=0
  _SP_REFRESH_STATE



### Check Loop - Pseudo pause loop waiting for user action
### _SP_CHECK_LOOP PAUSE={sp.guest_operation_timeout} COMMAND="'MY_MACRO VAL={value}'" CONDITION=1

[gcode_macro _SP_CHECK_LOOP]
gcode:
  {% set pause = params.PAUSE|default(10) | float %}
  {% set pause = pause|float * 1000/12 %}
  {% set command = params.COMMAND | default("") | string %}
  {% set condition = params.CONDITION | default(1) | int %} 
  {% set msg = params.MSG | default("...") | string %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set sp = printer['gcode_macro _SP_VARS'] %}

  M400
  RESPOND MSG={msg} 
  G4 P{pause*0.5}

  M400
  _SP_REFRESH_STATE
  M400
  _SP_CHECK_1 PAUSE={pause} CONDITION={condition} COMMAND={command}

[gcode_macro _SP_CHECK_1]
gcode:
  {% if not printer['gcode_macro _SP_VARS_RUNTIME'].is_filament_in == params.CONDITION|int %}
   G4 P{params.PAUSE|float*0.5}
  {% endif %}
   M400
   _SP_REFRESH_STATE
   _SP_CHECK_2 {rawparams}

[gcode_macro _SP_CHECK_2]
gcode:
  {% if not printer['gcode_macro _SP_VARS_RUNTIME'].is_filament_in == params.CONDITION|int %}
   G4 P{params.PAUSE|float*0.5}
  {% endif %}
   M400
   _SP_REFRESH_STATE
   _SP_CHECK_3 {rawparams}

[gcode_macro _SP_CHECK_3]
gcode:
  {% if not printer['gcode_macro _SP_VARS_RUNTIME'].is_filament_in == params.CONDITION|int %}
   G4 P{params.PAUSE|float*0.5}
  {% endif %}
   M400
   _SP_REFRESH_STATE
   _SP_CHECK_4 {rawparams}

[gcode_macro _SP_CHECK_4]
gcode:
  {% if not printer['gcode_macro _SP_VARS_RUNTIME'].is_filament_in == params.CONDITION|int %}
   G4 P{params.PAUSE}
  {% endif %}
   M400
   _SP_REFRESH_STATE
   _SP_CHECK_5 {rawparams}

[gcode_macro _SP_CHECK_5]
gcode:
  {% if not printer['gcode_macro _SP_VARS_RUNTIME'].is_filament_in == params.CONDITION|int %}
   G4 P{params.PAUSE}
  {% endif %}
   M400
   _SP_REFRESH_STATE
   _SP_CHECK_6 {rawparams}

[gcode_macro _SP_CHECK_6]
gcode:
  {% if not printer['gcode_macro _SP_VARS_RUNTIME'].is_filament_in == params.CONDITION|int %}
   G4 P{params.PAUSE}
  {% endif %}
   M400
   _SP_REFRESH_STATE
   _SP_CHECK_7 {rawparams}

[gcode_macro _SP_CHECK_7]
gcode:
  {% if not printer['gcode_macro _SP_VARS_RUNTIME'].is_filament_in == params.CONDITION|int %}
   G4 P{params.PAUSE}
  {% endif %}
   M400
   _SP_REFRESH_STATE
   _SP_CHECK_8 {rawparams}

[gcode_macro _SP_CHECK_8]
gcode:
  {% if not printer['gcode_macro _SP_VARS_RUNTIME'].is_filament_in == params.CONDITION|int %}
   G4 P{params.PAUSE|float*1.5}
  {% endif %}
   M400
   _SP_REFRESH_STATE
   _SP_CHECK_9 {rawparams}

[gcode_macro _SP_CHECK_9]
gcode:
  {% if not printer['gcode_macro _SP_VARS_RUNTIME'].is_filament_in == params.CONDITION|int %}
   G4 P{params.PAUSE|float*1.5}
  {% endif %}
   M400
   _SP_REFRESH_STATE
   _SP_CHECK_10 {rawparams}

[gcode_macro _SP_CHECK_10]
gcode:
  {% if not printer['gcode_macro _SP_VARS_RUNTIME'].is_filament_in == params.CONDITION|int %}
   G4 P{params.PAUSE|float*1.5}
  {% endif %}
   M400
   _SP_REFRESH_STATE
   _SP_CHECK_END {rawparams}

[gcode_macro _SP_CHECK_END]
gcode:
  RESPOND TYPE=command MSG="action:prompt_end"  ## Closing any previous UIs
  {% if not printer['gcode_macro _SP_VARS_RUNTIME'].is_filament_in == params.CONDITION|int %}
   RESPOND MSG="SP: Timeout reached. Performing the final check..."
   G4 P{params.PAUSE|float*1.5}
  {% endif %}
  M400
  _SP_REFRESH_STATE
  {params.COMMAND}



[gcode_macro _CHECK_SETTINGS_VERSION_SP]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% if rt.required_version != sp.version %}
    RESPOND TYPE=error MSG="WARNING: sp_mmu_code.cfg requires an updated sp_mmu.cfg v({rt.required_version}) settings file. Please review the latest configuration changes and update your sp_mmu.cfg."
    _SP_NOTIFY ACTION="empty" COMPLETE=1 ERROR=1   
  {% endif %}



[gcode_macro _SP_LANE_SELECT]
gcode:
    {% set sp = printer['gcode_macro _SP_VARS'] %}
    {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
    {% set lane = params.LANE | int %}

    {% if lane+1 <= sp.lanes and lane >= 0 %}

      {% if lane != rt.selected_servo_lane %}

        {% if sp.angles[lane] < rt.commanded_angle and sp.home_before_downchange == 1 %}  
          SP_HOME
        {% endif %}

        RESPOND MSG="SP: Selecting Lane {lane}"
        _SP_SERVO ANGLE={sp.angles[lane]}
        SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=selected_servo_lane VALUE={lane}
      {% endif %}

    {% else %}
      RESPOND MSG="SP: Invalid lane: {lane}"
    {% endif %}



[gcode_macro _SP_SERVO]
gcode:
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=commanded_angle VALUE={params.ANGLE|float}

  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}

  {% set angle = params.ANGLE|float + sp.angle_offset|float %} 
  {% set angle = [angle, printer.configfile.settings['servo sp_servo'].maximum_servo_angle] | min %}   # clamping servo angle post offset
  
  SET_SERVO SERVO=sp_servo ANGLE={angle}
  {% if params.ANGLE|float != rt.commanded_angle %}
    G4 P{1000*sp.switch_time}  ## waiting for servo movement to end
  {% endif %}
  M400

  {% if sp.debug == 1 %}
    RESPOND MSG="DEBUG: SERVO angle: {params.ANGLE | float} deg ({angle})"
  {% endif %}



[gcode_macro _SP_MOTOR]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  
  {% set speed = params.SPEED| default(sp.motor_speed) | int %}
  {% set accel = params.ACCEL| default(sp.motor_accel) | int %}
  {% set dist = params.DIST| default(0.0) | float %}
  {% set sync = params.SYNC| default(1) | int %}
  {% set stop = params.STOP| default(2) | int %}
  {% set dir = 1 if dist > 0 else -1 %}

  ### Backlash compensation  
  
    {% if rt.selected_servo_lane != rt.motor_last_loaded_lane and  dir > 0 %} # if lanes changed and the new travel direction is positive - in general a lane is retracted before switching so we are assuming backlash since we don't track the last direction per lane
        {% set dist = dist + sp.backlash %}
      
    {% elif dir != rt.motor_last_direction %}  # if the lane is the same and the direction is opposite, then we apply backlask compensation
        {% if dir > 0 %} 
          {% set dist = dist + sp.backlash %}

        {% else %}
          {% set dist = dist - sp.backlash %}
        {% endif %}       
    {% endif %}

    ### Speed compensation to keep move times constant
    {% set speed = speed * (dist|abs / params.DIST|float|abs) %}


    {% if sp.debug == 1 %}
      RESPOND MSG="DEBUG: SP MOTOR - Cmd Dist (Backlash Comp) : {params.DIST} mm ({dist})"
    {% endif %}

    SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=motor_last_direction VALUE={dir}
    SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=motor_last_loaded_lane VALUE={rt.selected_servo_lane}

    ### Extrusion multiplier and speed compensation
    {% if rt.selected_servo_lane >= 0 %}
      {% if sp.lane_em[rt.selected_servo_lane] %}
        {% set dist = dist * sp.lane_em[rt.selected_servo_lane] %}
        {% set speed = speed * sp.lane_em[rt.selected_servo_lane] %}
      {% endif %}
    {% endif %}

    {% set dist = dist | float | round(1) %}
    {% set speed = speed | float | round(1) %}


    ### Splitting MANUAL_STEPPER commands due to STOP_ON_ENDSTOP param behaviour
    {% if stop == 0 %}
      {% if sp.debug == 1 %}
        RESPOND MSG="DEBUG: SP MOTOR - Final Dist : {dist} mm"
      {% endif %}
      MANUAL_STEPPER STEPPER=sp_motor ENABLE=1 SET_POSITION=0 SPEED={speed} ACCEL={accel} MOVE={dist} SYNC={sync}
    {% else %}
      {% if dist > 0 %}
        {% set dist = [dist, rt.min_home_move] | max %}  ## Minimum positive homing move distance to avoid timer too close
      {% else %}
        {% set dist = [dist, -rt.min_home_move] | min %} 
      {% endif %}

      {% if sp.debug == 1 %}
        RESPOND MSG="DEBUG: SP MOTOR - Stop Move - Final Dist : {dist} mm"
      {% endif %}

      M400
      MANUAL_STEPPER STEPPER=sp_motor ENABLE=1 SET_POSITION=0 SPEED={speed} ACCEL={accel} MOVE={dist} STOP_ON_ENDSTOP={stop}
      G4 P40 ## Trying to avoid timer too close https://klipper.discourse.group/t/mcu-mmboard-shutdown-timer-too-close/376/2
    {% endif %}

    


#### ------ TIP FORMING ----------


[gcode_macro _SP_TIP_FORMING]
gcode:
    ## Configuration derived variables
    {% set sp = printer['gcode_macro _SP_VARS'] %}
    {% set defaults = printer['gcode_macro _SP_TIP_FORMING_DEFAULTS'] %}
    {% set dist_extruder_to_meltzone = params.DIST_EXTRUDER_TO_MELTZONE|default(sp.dist_extruder_to_meltzone) | float %} 
    {% set dist_filament_park = params.DIST_FILAMENT_PARK|default(sp.dist_filament_park) | float %} 
    
    ## Tip Forming Variables (automatically assigned from defaults)
    {% set pause_push_dist = defaults.pause_push_dist|float %}
    {% set pause_push_speed = defaults.pause_push_speed|float %}
    {% set cooldown_dist = defaults.cooldown_dist|float %}
    {% set cooldown_speed = defaults.cooldown_pull_speed|float %}
    {% set cooldown_pause = defaults.cooldown_pause|float %}
    {% set cooldown_secondary_moves = defaults.cooldown_secondary_moves|int %}
    {% set dip_melt_gap = defaults.dip_melt_gap|float %}
    {% set dip_speed = defaults.dip_speed|float %}
    {% set dip_pause = defaults.dip_pause|float %}
    {% set park_speed = defaults.park_speed|float %}

    ## Tip Forming ##
    M400
    M83
    RESPOND MSG="SP: Tip Forming"

    {% set park_distance = dist_extruder_to_meltzone - dist_filament_park - sp.tip_length_below_cut %}  # Measured from the meltzone

    ## Post Pause Retract
    G0 E{pause_push_dist} F{pause_push_speed*60}           ## Push post pause retract                                 

    {% set dist_to_meltzone_now = 0 %} 

    ## Cooldown
    {% if cooldown_dist > 0 %}
      G0 E-{cooldown_dist} F{cooldown_speed*60}              ## Tip form pull long                                  
      G4 P{cooldown_pause*1000}                              ## Tip form pause
      {% set dist_to_meltzone_now = cooldown_dist %} 

      {% if cooldown_secondary_moves == 1 %}
        G0 E{cooldown_dist*0.5} F{cooldown_speed*60*0.2}         ## Tip form push short
        G0 E-{cooldown_dist*0.25} F{cooldown_speed*60*0.4}        ## Tip form pull short
        {% set dist_to_meltzone_now = cooldown_dist*0.75 %}
      {% endif %} 

    {% endif %} 


    ## Dip
    {% if dip_melt_gap > 0 %}
      G0 E{dist_to_meltzone_now-dip_melt_gap} F{dip_speed*60}  ## Dip tip     
      {% set dist_to_meltzone_now = dip_melt_gap %}         

      {% if dip_pause > 0 %}                                              
        G0 E{dip_melt_gap*0.5} F{(dip_melt_gap/dip_pause)*60}  ## Dip pause. Not realy pause, but a slow crawling moving
        {% set dist_to_meltzone_now = dip_melt_gap*0.5 %}         
      {% endif %} 
    
    {% endif %}  


    ## Final fast retract park
    G0 E-{park_distance-dist_to_meltzone_now} F{park_speed*60}  ## Reaching required park position for the unload extruder stage



[gcode_macro _SP_UPDATE_TIP_FORMING_VALUES]
gcode:
    ## Fetch current defaults
    {% set defaults = printer['gcode_macro _SP_TIP_FORMING_DEFAULTS'] %}

    ## Parameters with current defaults
    {% set pause_push_dist = params.PAUSE_PUSH_DIST|default(defaults.pause_push_dist) | float %}
    {% set pause_push_speed = params.PAUSE_PUSH_SPEED|default(defaults.pause_push_speed) | float %}
    {% set cooldown_dist = params.COOLDOWN_DIST|default(defaults.cooldown_dist) | float %}
    {% set cooldown_speed = params.COOLDOWN_PULL_SPEED|default(defaults.cooldown_pull_speed) | float %}
    {% set cooldown_pause = params.COOLDOWN_PAUSE|default(defaults.cooldown_pause) | float %}
    {% set cooldown_secondary_moves = params.COOLDOWN_SECONDARY_MOVES| int %}
    {% set dip_melt_gap = params.DIP_MELT_GAP|default(defaults.dip_melt_gap) | float %}
    {% set dip_speed = params.DIP_SPEED|default(defaults.dip_speed) | float %}
    {% set dip_pause = params.DIP_PAUSE|default(defaults.dip_pause) | float %}
    {% set park_speed = params.PARK_SPEED|default(defaults.park_speed) | float %}

    ## Update variables in _SP_TIP_FORMING_DEFAULTS
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=pause_push_dist VALUE={pause_push_dist}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=pause_push_speed VALUE={pause_push_speed}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=cooldown_dist VALUE={cooldown_dist}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=cooldown_pull_speed VALUE={cooldown_speed}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=cooldown_pause VALUE={cooldown_pause}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=cooldown_secondary_moves VALUE={cooldown_secondary_moves}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=dip_melt_gap VALUE={dip_melt_gap}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=dip_speed VALUE={dip_speed}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=dip_pause VALUE={dip_pause}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=park_speed VALUE={park_speed}

    RESPOND MSG="SP: Updated TIP FORMING values"



[gcode_macro SP_TEST_MANUAL_TIP_FORMING]
gcode:
    ## Configuration derived variables
    {% set sp = printer['gcode_macro _SP_VARS'] %}
    {% set pause_retract_dist = sp.pause_retract | float %}
    
    ## Helper variables for extruder unload
    {% set load_dist = sp.dist_extruder_to_meltzone*1.2 | float %} 
    {% set load_speed = sp.speed_meltzone_loading | float %} 
    {% set sync_dist =  sp.dist_filament_park + sp.dist_sensor_to_extruder - sp.dist_sensor_to_synced_move | float %} 
    {% set sync_speed = sp.speed_sync_moves | float %}
    {% set sync_accel = sp.motor_accel | float %}
    {% set final_unload_distance = 60 | float %} 
    {% set final_unload_speed = sp.speed_hub_to_extruder | float %}

    ## Tip Forming Variables
    {% set pause_push_dist = params.PAUSE_PUSH_DIST|default(0.5) | float %}
    {% set pause_push_speed = params.PAUSE_PUSH_SPEED|default(30) | float %}
    {% set cooldown_dist = params.COOLDOWN_DIST|default(20) | float %}
    {% set cooldown_speed = params.COOLDOWN_PULL_SPEED|default(70) | float %}
    {% set cooldown_pause = params.COOLDOWN_PAUSE|default(0) | float %}
    {% set cooldown_secondary_moves = params.COOLDOWN_SECONDARY_MOVES|default(1) | float %}
    {% set dip_melt_gap = params.DIP_MELT_GAP|default(2) | float %}
    {% set dip_speed = params.DIP_SPEED|default(30) | float %}
    {% set dip_pause = params.DIP_PAUSE|default(2) | float %}
    {% set park_speed = params.PARK_SPEED|default(130) | float %}

    ## Updating Tip Forming Defaults
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=pause_push_dist VALUE={pause_push_dist}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=pause_push_speed VALUE={pause_push_speed}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=cooldown_dist VALUE={cooldown_dist}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=cooldown_pull_speed VALUE={cooldown_speed}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=cooldown_pause VALUE={cooldown_pause}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=cooldown_secondary_moves VALUE={cooldown_secondary_moves}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=dip_melt_gap VALUE={dip_melt_gap}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=dip_speed VALUE={dip_speed}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=dip_pause VALUE={dip_pause}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=park_speed VALUE={park_speed}


    ## Start
    RESPOND MSG="SP: Note: A filament strand should be pushed against the extruder gears"
    RESPOND MSG="SP: Starting Tip Forming Test"

    {% if printer[printer.toolhead.extruder].can_extrude == True %}
      _SP_DISABLE_PA
      _SP_DISABLE_MPC
      M83         
     
      ### Loading filament
      RESPOND MSG="SP: Loading Hotend"
      G0 E{load_dist/2} F{final_unload_speed*60}    ## Loading hotend
      G0 E{load_dist/2} F{load_speed*60}      ## Loading meltzone
      G4 P500 

      #### Simulating print, pause and initial retract to get more accurate tip forming samples ####
      RESPOND MSG="SP: Simulating print"
      G0 E7 F{4*30}                        ## Printing - 7mm of prime
      G4 P2000                             ## Filament change pause 
      G0 E-{pause_retract_dist} F{35*60}   ## Pause retract

      #### Tip Forming ####
      _SP_TIP_FORMING

      #### Done - Unloading extruder ####
      M400
      RESPOND MSG="SP: Unloading extruder"
      G4 P1000 ## Simulating servo movement pause
      FORCE_MOVE STEPPER=extruder VELOCITY={sync_speed} ACCEL={sync_accel} DISTANCE=-{sync_dist}   ## Simulating sync extruder unloading move
      G0 E-{final_unload_distance} F{final_unload_speed*60}  ## Unloading the filament out of the extruder gears to be picked by hand and inspected

      M400
      RESPOND MSG="SP: DONE! Pleast remove the filament gently and inspect the tip"
      RESPOND MSG=""
    
    {% else %}
      RESPOND MSG="SP: Please heat up the hotend"
    {% endif %}




#### ------ UI ----------

[gcode_macro _SP_UI_MSG]
gcode:
  {% set msg = params.MSG | default("") %}
  {% set title = params.TITLE | default("Guest Lane") %}

  RESPOND MSG="SP: {msg}"
  
  M400
  RESPOND TYPE=command MSG="action:prompt_begin {title}"
  RESPOND TYPE=command MSG="action:prompt_text {msg}"
  RESPOND TYPE=command MSG="action:prompt_footer_button OK|RESPOND TYPE=command MSG="action:prompt_end""
  RESPOND TYPE=command MSG="action:prompt_show"




#### ------ RUNOUT ----------


[gcode_macro _SP_SENSOR_IN]
gcode:
  # SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=is_filament_in VALUE=1
  # RESPOND MSG="RUNOUT IN"



[gcode_macro _SP_SENSOR_OUT]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set lane = printer.save_variables.variables.last_loaded_lane %}
  {% set printing = 1 if (not printer['pause_resume'].is_paused and printer['print_stats'].state == "printing") else 0 | int %}

  SET_FILAMENT_SENSOR SENSOR=sp_sensor_runout ENABLE=0
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=runout_event VALUE=1


  {% if sp.infinite_spool == 0 %} 
    RESPOND TYPE=error MSG="SP: WARNING: Filament RUNOUT OUT detected on Lane {lane}! "
    _SP_UI_MSG MSG="Filament RUNOUT OUT detected on Lane {printer.save_variables.variables.last_loaded_lane}!" TITLE="FILAMENT RUN OUT"
    _SP_NOTIFY ACTION="runout" LANE={lane}
    {% if printing == 1 %}
      M400
      PAUSE
    {% endif %}

  {% else %}
  
    ## Finding next lane 
    {% set lane_numbers = sp.lanes if sp.has_guest_lane != 1 else sp.lanes - 1 %}
    {% set next_lane = lane + 1  if lane < lane_numbers - 1 else 0 %}  ## round selection
    RESPOND MSG="SP - INFINITE SPOOL: LANE {lane} >>>> LANE {next_lane} ----- "
    _SP_NOTIFY ACTION="runout" LANE={lane} COMPLETE=0
    M400

    {% if printing == 1 %}
    _SP_TOOL_CHANGE LANE={next_lane} RUNOUT=1

    {% else %}
      _SP_RUNOUT LANE={next_lane}
      M400
      RESPOND MSG="SP: Running User AFTER_CHANGE Macro"
      SAVE_GCODE_STATE NAME=user_macro
      _SP_AFTER_CHANGE
      M400
      RESTORE_GCODE_STATE NAME=user_macro
    {% endif %}
  
  {% endif %}



[gcode_macro _SP_RUNOUT]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set lane = printer.save_variables.variables.last_loaded_lane %}
  {% set next_lane = params.LANE | int %}


    ## Purging remaining filament
    M400
    SP_CLEAR_ERROR_CODES
    _SP_REFRESH_STATE
    M400
    _SP_RUNOUT_INITIAL_PURGE LANE={lane}
    
    ## Loading extruder with next lane
    # M400
    # _SP_REFRESH_STATE
    # M400
    # _SP_LOAD_EXTRUDER LANE={next_lane} 

    ## Retracting lane and checking if the loaded distance was correct
    M400
    _SP_REFRESH_STATE
    M400
    _SP_RUNOUT_CHECK LANE={next_lane}  ## replace with synced moves up to the sensor and then checking state
    
    M400
    _SP_REFRESH_STATE
    M400
    _SP_RUNOUT_END



[gcode_macro _SP_RUNOUT_INITIAL_PURGE]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}

  {% if params.LANE %}
    {% if rt.is_filament_in != 1 %} 
      SET_FILAMENT_SENSOR SENSOR=sp_sensor_runout ENABLE=0
      RESPOND MSG="SP - INFINITE SPOOL: Purging filament from RUNOUT Lane"
      FORCE_MOVE STEPPER=extruder VELOCITY={sp.speed_meltzone_loading*0.75} ACCEL={sp.motor_accel} DISTANCE={(sp.dist_sensor_to_extruder+sp.dist_filament_park)*1.5}
      M400
      RESPOND MSG="SP - INFINITE SPOOL: Leftover runout filament pushed post extruder"
  
    {% else %}
        _SP_SET_EXIT_CODE CODE=1  
        RESPOND TYPE=error MSG="SP - INFINITE SPOOL: Hub not empty! Filament detected by the sensor" 
    {% endif %}

  {% else %}
    RESPOND TYPE=error MSG="SP - INFINITE SPOOL: LANE parameters missing from RUNOUT_PURGE"
  {% endif %}

  

[gcode_macro _SP_RUNOUT_CHECK]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  M400

  {% if rt.exit_code == 0 %}
    RESPOND MSG="SP - INFINITE SPOOL: Checking if previous extruder loading was successful.. "

    {% if params.LANE %}
    
      {% if rt.is_filament_in != 1 %} 

      # {% if rt.is_filament_in == 1 %} 

        # ## Start Synced moves 
        # _SP_LANE_SELECT LANE={params.LANE | int}

        # M400
        # {% set sync_dist = sp.dist_filament_park*1.2 + sp.dist_sensor_to_extruder - sp.dist_sensor_to_synced_move %}   ## extra 20% filament_park distance buffer due to synced move losses   
        # _SP_MOTOR STOP=0 SYNC=0 SPEED={sp.speed_sync_moves} ACCEL={sp.motor_accel} DIST=-{sync_dist+sp.backlash}   ## compensating for backlash due to compressed filament in the bowden
        # FORCE_MOVE STEPPER=extruder VELOCITY={sp.speed_sync_moves} ACCEL={sp.motor_accel} DISTANCE=-{sync_dist} 

        # ## Outside the extruder towards the sensor - homing move
        # M400
        # _SP_MOTOR STOP=0 SPEED={sp.speed_hub_to_extruder} ACCEL={sp.motor_accel} DIST=-{sp.dist_sensor_to_synced_move*1.2} # move to the point of clearing the extruder
        
        # {% if sp.sensor_safe_move > 0 %}
        #   _SP_MOTOR STOP=0 SPEED={sp.speed_hub_to_extruder} DIST=-{sp.sensor_safe_move} ## safety move to ensure the endstop stays untriggered
        # {% endif %}

        M400
        _SP_REFRESH_STATE
        M400
        _SP_RUNOUT_CHECK_B LANE={params.LANE}
        
      
      {% else %}
        _SP_SET_EXIT_CODE CODE=1 
        # RESPOND TYPE=error MSG="SP - INFINITE SPOOL: Filament not detected by the sensor" 
        RESPOND TYPE=error MSG="SP - INFINITE SPOOL: Filament detected by the sensor" 
        SP_HOME
      {% endif %}

    {% else %}
      _SP_SET_EXIT_CODE CODE=1
      RESPOND TYPE=error MSG="SP - INFINITE SPOOL: LANE parameters missing from RUNOUT CHECK"
      SP_HOME
    {% endif %}

 {% else %}
   _SP_SET_EXIT_CODE CODE=1  ### Bypass and carry error
   RESPOND TYPE=error MSG="SP - INFINITE SPOOL: Extruder couldn't be loaded" 
   SP_HOME
 {% endif %}



[gcode_macro _SP_RUNOUT_CHECK_B]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  M400

  {% if rt.exit_code == 0 %}
    {% if params.LANE %}  
      {% if rt.is_filament_in == 0 %}  

         RESPOND MSG="SP - INFINITE SPOOL: Check was successful "

        ## Retract a bit then load the entire lane 
        # _SP_MOTOR STOP=0 SPEED={sp.speed_hub_to_extruder} DIST=-10 

        ## Final lane loading
        {% set purge = sp.dist_extruder_to_meltzone*0.7+sp.print_start_change_purge %}  ## setting purge amount to flush the hotend
        M400
        _SP_LOAD_LANE LANE={params.LANE | int} PURGE={purge} FORCE=1
      
      {% else %}
        _SP_SET_EXIT_CODE CODE=1  ### Bypass and carry error
        RESPOND TYPE=error MSG="SP - INFINITE SPOOL: Check move failed. Filament hasn't clear sensor for the expected distance" 
        SP_HOME
      {% endif %}

    {% else %}
      RESPOND TYPE=error MSG="SP - INFINITE SPOOL: Sensor still triggered during check" 
      _SP_SET_EXIT_CODE CODE=1
    {% endif %}

 {% else %}
   _SP_SET_EXIT_CODE CODE=1  ### Bypass and carry error
   RESPOND TYPE=error MSG="SP - INFINITE SPOOL: Extruder couldn't be loaded" 
   SP_HOME
 {% endif %}



[gcode_macro _SP_RUNOUT_END]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  M400
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=runout_event VALUE=0  ### runout event finished either way

  {% if rt.exit_code == 0 %}
    G0 E-0.5 F{60*40} ## ooze retraction
    _SP_NOTIFY ACTION="runout" LANE={lane} COMPLETE=1
    
    RESPOND MSG="SP - INFINITE SPOOL: Change completed. Continuing..."
    {% if printer['pause_resume'].is_paused %}
      SET_FILAMENT_SENSOR SENSOR=sp_sensor_runout ENABLE=1
      M400
      RESUME 
    {% endif %}
  
  {% else %}
    RESPOND TYPE=error MSG="SP - INFINITE SPOOL: ERROR. Infinite spool change failed"
    _SP_UI_MSG MSG="ERROR. Infinite spool change failed" TITLE="FILAMENT RUN OUT"
    _SP_NOTIFY ACTION="runout" LANE={lane} COMPLETE=1 ERROR=1
    SP_HOME
  {% endif %}




#### ------ TESTS ----------


## Example: SP_TEST_SERVO ANGLE=50 
[gcode_macro SP_TEST_SERVO]
gcode:
  _SP_SERVO ANGLE={params.ANGLE|float}
  RESPOND MSG="SP: Angle set to: {params.ANGLE|float}"


## Example: SP_TEST_MMU TIMES=2
[gcode_macro SP_TEST_MMU]
gcode:
  RESPOND MSG="SP: Testing MMU movements ..."
  {% set times = params.TIMES|default(2) | int %}
  {% set dist = params.DISTANCE|default(30) | int %}
  {% for i in range(times) %}
    _SP_TEST DISTANCE={dist}
  {% endfor %}
  SP_HOME


[gcode_macro _SP_TEST]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set dist = params.DISTANCE| default(30) | int %}
  {% for i in range(sp.lanes) %}
      RESPOND MSG="SP: Servo commanded to: {sp.angles[i]}"
      _SP_SERVO ANGLE={sp.angles[i]}
      _SP_MOTOR DIST={dist} STOP=0
      _SP_MOTOR DIST=-{dist} STOP=0
  {% endfor %}


## Example: SP_TEST_LOAD_UNLOAD_EXTRUDER LANE=0
[gcode_macro SP_TEST_LOAD_UNLOAD_EXTRUDER]
gcode:

  {% if params.LANE %}
  RESPOND MSG="SP: Testing loading and unloading LANE {params.LANE} between the HUB and the Extruder ..."
     SP_CLEAR_ERROR_CODES
    _SP_LOAD_EXTRUDER LANE={params.LANE | int}
    RESPOND MSG="TEST load unload after load"

    _SP_UNLOAD_EXTRUDER LANE={params.LANE | int}
  
  {% else %}
    RESPOND TYPE=error MSG="SP: LANES parameters missing. Run again with LANE=<0...>"
  {% endif %}




#### ------ RUNTIME VARIABLES ----------


[gcode_macro _SP_VARS_RUNTIME]

# Runtime - Do not set
variable_required_version: 0.91      # required settings file version
variable_active: 0                  # mmu initialised
variable_commanded_angle: -1        # keeping track of the commanded servo angle
variable_selected_servo_lane: -1    # -1 parked, 99 boot value
variable_unloading_lane: -1         
variable_loading_lane: -1
variable_is_filament_in: -1         # sensor status
variable_exit_code: 0               # last action exit code | 0 = success,  1 = error, 10 success with warning
variable_motor_last_direction: -1   # tracks last move direction for backlash compensation
variable_motor_last_loaded_lane: -1 # tracks last selected lane for backlash compensation
variable_min_home_move: 30          # setting a minimum home move length to try and avoid timer too close errors
variable_next_purge: 60             # mm of filament purged at the next lane change - set by the slicer
variable_curr_lane_temp: 0
variable_print_start_change: 0      # tracks if a filament change was required during _SP_PRINT_START
variable_user_macros_executed: 0    # tracks user macros execution
variable_sp_pause: 0                # tracks if sp pause was executed
variable_sidestep_ref: 0            # tracks sidestep position
variable_runout_event: 0            # tracks runout state
variable_counter_pauses: 0
variable_counter_changes: 0
variable_counter_errors: 0

gcode:



#### ------ PLAYGROUND ----------


# [gcode_macro _SP_TEMP]
# gcode:
